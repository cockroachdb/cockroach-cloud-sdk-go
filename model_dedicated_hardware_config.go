/*
CockroachDB Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-12-28
Contact: support@cockroachlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DedicatedHardwareConfig struct for DedicatedHardwareConfig
type DedicatedHardwareConfig struct {
	// MachineType is the machine type identifier within the given cloud provider, ex. m5.xlarge, n2-standard-4.
	MachineType string `json:"machine_type"`
	// NumVirtualCPUs is the number of virtual CPUs per node in the cluster.
	NumVirtualCpus int32 `json:"num_virtual_cpus"`
	// StorageGiB is the number of storage GiB per node in the cluster.
	StorageGib int32 `json:"storage_gib"`
	// MemoryGiB is the memory GiB per node in the cluster.
	MemoryGib float32 `json:"memory_gib"`
	// DiskIOPs is the number of disk I/O operations per second that are permitted on each node in the cluster. Zero indicates the cloud provider-specific default.
	DiskIops int32 `json:"disk_iops"`
}

// NewDedicatedHardwareConfig instantiates a new DedicatedHardwareConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDedicatedHardwareConfig(machineType string, numVirtualCpus int32, storageGib int32, memoryGib float32, diskIops int32) *DedicatedHardwareConfig {
	this := DedicatedHardwareConfig{}
	this.MachineType = machineType
	this.NumVirtualCpus = numVirtualCpus
	this.StorageGib = storageGib
	this.MemoryGib = memoryGib
	this.DiskIops = diskIops
	return &this
}

// NewDedicatedHardwareConfigWithDefaults instantiates a new DedicatedHardwareConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDedicatedHardwareConfigWithDefaults() *DedicatedHardwareConfig {
	this := DedicatedHardwareConfig{}
	return &this
}

// GetMachineType returns the MachineType field value
func (o *DedicatedHardwareConfig) GetMachineType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MachineType
}

// GetMachineTypeOk returns a tuple with the MachineType field value
// and a boolean to check if the value has been set.
func (o *DedicatedHardwareConfig) GetMachineTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MachineType, true
}

// SetMachineType sets field value
func (o *DedicatedHardwareConfig) SetMachineType(v string) {
	o.MachineType = v
}

// GetNumVirtualCpus returns the NumVirtualCpus field value
func (o *DedicatedHardwareConfig) GetNumVirtualCpus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumVirtualCpus
}

// GetNumVirtualCpusOk returns a tuple with the NumVirtualCpus field value
// and a boolean to check if the value has been set.
func (o *DedicatedHardwareConfig) GetNumVirtualCpusOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NumVirtualCpus, true
}

// SetNumVirtualCpus sets field value
func (o *DedicatedHardwareConfig) SetNumVirtualCpus(v int32) {
	o.NumVirtualCpus = v
}

// GetStorageGib returns the StorageGib field value
func (o *DedicatedHardwareConfig) GetStorageGib() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StorageGib
}

// GetStorageGibOk returns a tuple with the StorageGib field value
// and a boolean to check if the value has been set.
func (o *DedicatedHardwareConfig) GetStorageGibOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StorageGib, true
}

// SetStorageGib sets field value
func (o *DedicatedHardwareConfig) SetStorageGib(v int32) {
	o.StorageGib = v
}

// GetMemoryGib returns the MemoryGib field value
func (o *DedicatedHardwareConfig) GetMemoryGib() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MemoryGib
}

// GetMemoryGibOk returns a tuple with the MemoryGib field value
// and a boolean to check if the value has been set.
func (o *DedicatedHardwareConfig) GetMemoryGibOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MemoryGib, true
}

// SetMemoryGib sets field value
func (o *DedicatedHardwareConfig) SetMemoryGib(v float32) {
	o.MemoryGib = v
}

// GetDiskIops returns the DiskIops field value
func (o *DedicatedHardwareConfig) GetDiskIops() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DiskIops
}

// GetDiskIopsOk returns a tuple with the DiskIops field value
// and a boolean to check if the value has been set.
func (o *DedicatedHardwareConfig) GetDiskIopsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DiskIops, true
}

// SetDiskIops sets field value
func (o *DedicatedHardwareConfig) SetDiskIops(v int32) {
	o.DiskIops = v
}

func (o DedicatedHardwareConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["machine_type"] = o.MachineType
	}
	if true {
		toSerialize["num_virtual_cpus"] = o.NumVirtualCpus
	}
	if true {
		toSerialize["storage_gib"] = o.StorageGib
	}
	if true {
		toSerialize["memory_gib"] = o.MemoryGib
	}
	if true {
		toSerialize["disk_iops"] = o.DiskIops
	}
	return json.Marshal(toSerialize)
}

type NullableDedicatedHardwareConfig struct {
	value *DedicatedHardwareConfig
	isSet bool
}

func (v NullableDedicatedHardwareConfig) Get() *DedicatedHardwareConfig {
	return v.value
}

func (v *NullableDedicatedHardwareConfig) Set(val *DedicatedHardwareConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDedicatedHardwareConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDedicatedHardwareConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDedicatedHardwareConfig(val *DedicatedHardwareConfig) *NullableDedicatedHardwareConfig {
	return &NullableDedicatedHardwareConfig{value: val, isSet: true}
}

func (v NullableDedicatedHardwareConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDedicatedHardwareConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


