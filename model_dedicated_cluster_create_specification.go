/*
CockroachDB Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-12-28
Contact: support@cockroachlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DedicatedClusterCreateSpecification struct for DedicatedClusterCreateSpecification
type DedicatedClusterCreateSpecification struct {
	// Region keys should match the cloud provider's zone code. For example, for Oregon, set region_name to \"us-west2\" for GCP and \"us-west-2\" for AWS. Values represent the node count.
	RegionNodes map[string]int32 `json:"region_nodes"`
	Hardware DedicatedHardwareCreateSpecification `json:"hardware"`
	// The CockroachDB version for the cluster. The current version is used if omitted.
	CockroachVersion *string `json:"cockroach_version,omitempty"`
}

// NewDedicatedClusterCreateSpecification instantiates a new DedicatedClusterCreateSpecification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDedicatedClusterCreateSpecification(regionNodes map[string]int32, hardware DedicatedHardwareCreateSpecification) *DedicatedClusterCreateSpecification {
	this := DedicatedClusterCreateSpecification{}
	this.RegionNodes = regionNodes
	this.Hardware = hardware
	return &this
}

// NewDedicatedClusterCreateSpecificationWithDefaults instantiates a new DedicatedClusterCreateSpecification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDedicatedClusterCreateSpecificationWithDefaults() *DedicatedClusterCreateSpecification {
	this := DedicatedClusterCreateSpecification{}
	return &this
}

// GetRegionNodes returns the RegionNodes field value
func (o *DedicatedClusterCreateSpecification) GetRegionNodes() map[string]int32 {
	if o == nil {
		var ret map[string]int32
		return ret
	}

	return o.RegionNodes
}

// GetRegionNodesOk returns a tuple with the RegionNodes field value
// and a boolean to check if the value has been set.
func (o *DedicatedClusterCreateSpecification) GetRegionNodesOk() (*map[string]int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RegionNodes, true
}

// SetRegionNodes sets field value
func (o *DedicatedClusterCreateSpecification) SetRegionNodes(v map[string]int32) {
	o.RegionNodes = v
}

// GetHardware returns the Hardware field value
func (o *DedicatedClusterCreateSpecification) GetHardware() DedicatedHardwareCreateSpecification {
	if o == nil {
		var ret DedicatedHardwareCreateSpecification
		return ret
	}

	return o.Hardware
}

// GetHardwareOk returns a tuple with the Hardware field value
// and a boolean to check if the value has been set.
func (o *DedicatedClusterCreateSpecification) GetHardwareOk() (*DedicatedHardwareCreateSpecification, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Hardware, true
}

// SetHardware sets field value
func (o *DedicatedClusterCreateSpecification) SetHardware(v DedicatedHardwareCreateSpecification) {
	o.Hardware = v
}

// GetCockroachVersion returns the CockroachVersion field value if set, zero value otherwise.
func (o *DedicatedClusterCreateSpecification) GetCockroachVersion() string {
	if o == nil || o.CockroachVersion == nil {
		var ret string
		return ret
	}
	return *o.CockroachVersion
}

// GetCockroachVersionOk returns a tuple with the CockroachVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DedicatedClusterCreateSpecification) GetCockroachVersionOk() (*string, bool) {
	if o == nil || o.CockroachVersion == nil {
		return nil, false
	}
	return o.CockroachVersion, true
}

// HasCockroachVersion returns a boolean if a field has been set.
func (o *DedicatedClusterCreateSpecification) HasCockroachVersion() bool {
	if o != nil && o.CockroachVersion != nil {
		return true
	}

	return false
}

// SetCockroachVersion gets a reference to the given string and assigns it to the CockroachVersion field.
func (o *DedicatedClusterCreateSpecification) SetCockroachVersion(v string) {
	o.CockroachVersion = &v
}

func (o DedicatedClusterCreateSpecification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["region_nodes"] = o.RegionNodes
	}
	if true {
		toSerialize["hardware"] = o.Hardware
	}
	if o.CockroachVersion != nil {
		toSerialize["cockroach_version"] = o.CockroachVersion
	}
	return json.Marshal(toSerialize)
}

type NullableDedicatedClusterCreateSpecification struct {
	value *DedicatedClusterCreateSpecification
	isSet bool
}

func (v NullableDedicatedClusterCreateSpecification) Get() *DedicatedClusterCreateSpecification {
	return v.value
}

func (v *NullableDedicatedClusterCreateSpecification) Set(val *DedicatedClusterCreateSpecification) {
	v.value = val
	v.isSet = true
}

func (v NullableDedicatedClusterCreateSpecification) IsSet() bool {
	return v.isSet
}

func (v *NullableDedicatedClusterCreateSpecification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDedicatedClusterCreateSpecification(val *DedicatedClusterCreateSpecification) *NullableDedicatedClusterCreateSpecification {
	return &NullableDedicatedClusterCreateSpecification{value: val, isSet: true}
}

func (v NullableDedicatedClusterCreateSpecification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDedicatedClusterCreateSpecification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


