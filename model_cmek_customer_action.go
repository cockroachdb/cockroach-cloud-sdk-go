/*
CockroachDB Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-12-28
Contact: support@cockroachlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CMEKCustomerAction CMEKCustomerAction enumerates the actions a customer can take on a cluster that has been enabled for CMEK.
type CMEKCustomerAction string

// List of CMEKCustomerAction
const (
	UNKNOWN_ACTION CMEKCustomerAction = "UNKNOWN_ACTION"
	REVOKE CMEKCustomerAction = "REVOKE"
)

// All allowed values of CMEKCustomerAction enum
var AllowedCMEKCustomerActionEnumValues = []CMEKCustomerAction{
	"UNKNOWN_ACTION",
	"REVOKE",
}

func (v *CMEKCustomerAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CMEKCustomerAction(value)
	for _, existing := range AllowedCMEKCustomerActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CMEKCustomerAction", value)
}

// NewCMEKCustomerActionFromValue returns a pointer to a valid CMEKCustomerAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCMEKCustomerActionFromValue(v string) (*CMEKCustomerAction, error) {
	ev := CMEKCustomerAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CMEKCustomerAction: valid values are %v", v, AllowedCMEKCustomerActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CMEKCustomerAction) IsValid() bool {
	for _, existing := range AllowedCMEKCustomerActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CMEKCustomerAction value
func (v CMEKCustomerAction) Ptr() *CMEKCustomerAction {
	return &v
}

type NullableCMEKCustomerAction struct {
	value *CMEKCustomerAction
	isSet bool
}

func (v NullableCMEKCustomerAction) Get() *CMEKCustomerAction {
	return v.value
}

func (v *NullableCMEKCustomerAction) Set(val *CMEKCustomerAction) {
	v.value = val
	v.isSet = true
}

func (v NullableCMEKCustomerAction) IsSet() bool {
	return v.isSet
}

func (v *NullableCMEKCustomerAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCMEKCustomerAction(val *CMEKCustomerAction) *NullableCMEKCustomerAction {
	return &NullableCMEKCustomerAction{value: val, isSet: true}
}

func (v NullableCMEKCustomerAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCMEKCustomerAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

