/*
CockroachDB Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-12-28
Contact: support@cockroachlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CMEKKeySpecification CMEKKeySpecification contains all the details necessary to use a customer-provided encryption key. This involves the type/location of the key and the principal to authenticate as when accessing it.
type CMEKKeySpecification struct {
	Type *CMEKKeyType `json:"type,omitempty"`
	Uri *string `json:"uri,omitempty"`
	AuthPrincipal *string `json:"auth_principal,omitempty"`
}

// NewCMEKKeySpecification instantiates a new CMEKKeySpecification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCMEKKeySpecification() *CMEKKeySpecification {
	this := CMEKKeySpecification{}
	var type_ CMEKKeyType = UNKNOWN_KEY_TYPE
	this.Type = &type_
	return &this
}

// NewCMEKKeySpecificationWithDefaults instantiates a new CMEKKeySpecification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCMEKKeySpecificationWithDefaults() *CMEKKeySpecification {
	this := CMEKKeySpecification{}
	var type_ CMEKKeyType = UNKNOWN_KEY_TYPE
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CMEKKeySpecification) GetType() CMEKKeyType {
	if o == nil || o.Type == nil {
		var ret CMEKKeyType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CMEKKeySpecification) GetTypeOk() (*CMEKKeyType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CMEKKeySpecification) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given CMEKKeyType and assigns it to the Type field.
func (o *CMEKKeySpecification) SetType(v CMEKKeyType) {
	o.Type = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *CMEKKeySpecification) GetUri() string {
	if o == nil || o.Uri == nil {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CMEKKeySpecification) GetUriOk() (*string, bool) {
	if o == nil || o.Uri == nil {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *CMEKKeySpecification) HasUri() bool {
	if o != nil && o.Uri != nil {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *CMEKKeySpecification) SetUri(v string) {
	o.Uri = &v
}

// GetAuthPrincipal returns the AuthPrincipal field value if set, zero value otherwise.
func (o *CMEKKeySpecification) GetAuthPrincipal() string {
	if o == nil || o.AuthPrincipal == nil {
		var ret string
		return ret
	}
	return *o.AuthPrincipal
}

// GetAuthPrincipalOk returns a tuple with the AuthPrincipal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CMEKKeySpecification) GetAuthPrincipalOk() (*string, bool) {
	if o == nil || o.AuthPrincipal == nil {
		return nil, false
	}
	return o.AuthPrincipal, true
}

// HasAuthPrincipal returns a boolean if a field has been set.
func (o *CMEKKeySpecification) HasAuthPrincipal() bool {
	if o != nil && o.AuthPrincipal != nil {
		return true
	}

	return false
}

// SetAuthPrincipal gets a reference to the given string and assigns it to the AuthPrincipal field.
func (o *CMEKKeySpecification) SetAuthPrincipal(v string) {
	o.AuthPrincipal = &v
}

func (o CMEKKeySpecification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Uri != nil {
		toSerialize["uri"] = o.Uri
	}
	if o.AuthPrincipal != nil {
		toSerialize["auth_principal"] = o.AuthPrincipal
	}
	return json.Marshal(toSerialize)
}

type NullableCMEKKeySpecification struct {
	value *CMEKKeySpecification
	isSet bool
}

func (v NullableCMEKKeySpecification) Get() *CMEKKeySpecification {
	return v.value
}

func (v *NullableCMEKKeySpecification) Set(val *CMEKKeySpecification) {
	v.value = val
	v.isSet = true
}

func (v NullableCMEKKeySpecification) IsSet() bool {
	return v.isSet
}

func (v *NullableCMEKKeySpecification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCMEKKeySpecification(val *CMEKKeySpecification) *NullableCMEKKeySpecification {
	return &NullableCMEKKeySpecification{value: val, isSet: true}
}

func (v NullableCMEKKeySpecification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCMEKKeySpecification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


