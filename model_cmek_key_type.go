/*
CockroachDB Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-12-28
Contact: support@cockroachlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CMEKKeyType CMEKKeyType enumerates types of customer-managed keys.   - UNKNOWN_KEY_TYPE: UNKNOWN should never be used; if it is used, it indicates a bug.
type CMEKKeyType string

// List of CMEKKeyType
const (
	UNKNOWN_KEY_TYPE CMEKKeyType = "UNKNOWN_KEY_TYPE"
	AWS_KMS CMEKKeyType = "AWS_KMS"
	GCP_CLOUD_KMS CMEKKeyType = "GCP_CLOUD_KMS"
)

// All allowed values of CMEKKeyType enum
var AllowedCMEKKeyTypeEnumValues = []CMEKKeyType{
	"UNKNOWN_KEY_TYPE",
	"AWS_KMS",
	"GCP_CLOUD_KMS",
}

func (v *CMEKKeyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CMEKKeyType(value)
	for _, existing := range AllowedCMEKKeyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CMEKKeyType", value)
}

// NewCMEKKeyTypeFromValue returns a pointer to a valid CMEKKeyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCMEKKeyTypeFromValue(v string) (*CMEKKeyType, error) {
	ev := CMEKKeyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CMEKKeyType: valid values are %v", v, AllowedCMEKKeyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CMEKKeyType) IsValid() bool {
	for _, existing := range AllowedCMEKKeyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CMEKKeyType value
func (v CMEKKeyType) Ptr() *CMEKKeyType {
	return &v
}

type NullableCMEKKeyType struct {
	value *CMEKKeyType
	isSet bool
}

func (v NullableCMEKKeyType) Get() *CMEKKeyType {
	return v.value
}

func (v *NullableCMEKKeyType) Set(val *CMEKKeyType) {
	v.value = val
	v.isSet = true
}

func (v NullableCMEKKeyType) IsSet() bool {
	return v.isSet
}

func (v *NullableCMEKKeyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCMEKKeyType(val *CMEKKeyType) *NullableCMEKKeyType {
	return &NullableCMEKKeyType{value: val, isSet: true}
}

func (v NullableCMEKKeyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCMEKKeyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

