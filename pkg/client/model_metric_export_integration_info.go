// Copyright 2022 The Cockroach Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// CockroachDB Cloud API
// API version: 2022-09-20

package client

import (
	"encoding/json"
)

// MetricExportIntegrationInfo struct for MetricExportIntegrationInfo.
type MetricExportIntegrationInfo struct {
	Cloudwatch  *CloudWatchConfig   `json:"cloudwatch,omitempty"`
	Datadog     *DatadogConfig      `json:"datadog,omitempty"`
	Status      *MetricExportStatus `json:"status,omitempty"`
	UserMessage *string             `json:"user_message,omitempty"`
}

// NewMetricExportIntegrationInfo instantiates a new MetricExportIntegrationInfo object.
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricExportIntegrationInfo() *MetricExportIntegrationInfo {
	p := MetricExportIntegrationInfo{}
	return &p
}

// GetCloudwatch returns the Cloudwatch field value if set, zero value otherwise.
func (o *MetricExportIntegrationInfo) GetCloudwatch() CloudWatchConfig {
	if o == nil || o.Cloudwatch == nil {
		var ret CloudWatchConfig
		return ret
	}
	return *o.Cloudwatch
}

// SetCloudwatch gets a reference to the given CloudWatchConfig and assigns it to the Cloudwatch field.
func (o *MetricExportIntegrationInfo) SetCloudwatch(v CloudWatchConfig) {
	o.Cloudwatch = &v
}

// GetDatadog returns the Datadog field value if set, zero value otherwise.
func (o *MetricExportIntegrationInfo) GetDatadog() DatadogConfig {
	if o == nil || o.Datadog == nil {
		var ret DatadogConfig
		return ret
	}
	return *o.Datadog
}

// SetDatadog gets a reference to the given DatadogConfig and assigns it to the Datadog field.
func (o *MetricExportIntegrationInfo) SetDatadog(v DatadogConfig) {
	o.Datadog = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MetricExportIntegrationInfo) GetStatus() MetricExportStatus {
	if o == nil || o.Status == nil {
		var ret MetricExportStatus
		return ret
	}
	return *o.Status
}

// SetStatus gets a reference to the given MetricExportStatus and assigns it to the Status field.
func (o *MetricExportIntegrationInfo) SetStatus(v MetricExportStatus) {
	o.Status = &v
}

// GetUserMessage returns the UserMessage field value if set, zero value otherwise.
func (o *MetricExportIntegrationInfo) GetUserMessage() string {
	if o == nil || o.UserMessage == nil {
		var ret string
		return ret
	}
	return *o.UserMessage
}

// SetUserMessage gets a reference to the given string and assigns it to the UserMessage field.
func (o *MetricExportIntegrationInfo) SetUserMessage(v string) {
	o.UserMessage = &v
}

func (o MetricExportIntegrationInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cloudwatch != nil {
		toSerialize["cloudwatch"] = o.Cloudwatch
	}
	if o.Datadog != nil {
		toSerialize["datadog"] = o.Datadog
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.UserMessage != nil {
		toSerialize["user_message"] = o.UserMessage
	}
	return json.Marshal(toSerialize)
}
