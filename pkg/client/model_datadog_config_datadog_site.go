// Copyright 2022 The Cockroach Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// CockroachDB Cloud API
// API version: 2022-09-20

package client

import (
	"encoding/json"
	"fmt"
)

// DatadogConfigDatadogSite the model 'DatadogConfigDatadogSite'.
type DatadogConfigDatadogSite string

// List of DatadogConfig.DatadogSite.
const (
	DATADOGCONFIGDATADOGSITE_US1     DatadogConfigDatadogSite = "US1"
	DATADOGCONFIGDATADOGSITE_US3     DatadogConfigDatadogSite = "US3"
	DATADOGCONFIGDATADOGSITE_US5     DatadogConfigDatadogSite = "US5"
	DATADOGCONFIGDATADOGSITE_US1_GOV DatadogConfigDatadogSite = "US1_GOV"
	DATADOGCONFIGDATADOGSITE_EU1     DatadogConfigDatadogSite = "EU1"
)

// All allowed values of DatadogConfigDatadogSite enum.
var AllowedDatadogConfigDatadogSiteEnumValues = []DatadogConfigDatadogSite{
	"US1",
	"US3",
	"US5",
	"US1_GOV",
	"EU1",
}

func (v *DatadogConfigDatadogSite) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DatadogConfigDatadogSite(value)
	for _, existing := range AllowedDatadogConfigDatadogSiteEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DatadogConfigDatadogSite", value)
}

// NewDatadogConfigDatadogSiteFromValue returns a pointer to a valid DatadogConfigDatadogSite
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewDatadogConfigDatadogSiteFromValue(v string) (*DatadogConfigDatadogSite, error) {
	ev := DatadogConfigDatadogSite(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DatadogConfigDatadogSite: valid values are %v", v, AllowedDatadogConfigDatadogSiteEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v DatadogConfigDatadogSite) IsValid() bool {
	for _, existing := range AllowedDatadogConfigDatadogSiteEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DatadogConfig.DatadogSite value.
func (v DatadogConfigDatadogSite) Ptr() *DatadogConfigDatadogSite {
	return &v
}
