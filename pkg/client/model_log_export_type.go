// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// CockroachDB Cloud API
// API version: 2022-07-12T00:00:00.000Z

package client

import (
	"encoding/json"
	"fmt"
)

// LogExportType LogExportType encodes the cloud selection that we're exporting to along with the cloud logging platform. Currently, each cloud has a single logging platform.
type LogExportType string

// List of LogExportType.
const (
	LOGEXPORTTYPE_AWS_CLOUDWATCH    LogExportType = "AWS_CLOUDWATCH"
	LOGEXPORTTYPE_GCP_CLOUD_LOGGING LogExportType = "GCP_CLOUD_LOGGING"
)

// All allowed values of LogExportType enum.
var AllowedLogExportTypeEnumValues = []LogExportType{
	"AWS_CLOUDWATCH",
	"GCP_CLOUD_LOGGING",
}

func (v *LogExportType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LogExportType(value)
	for _, existing := range AllowedLogExportTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LogExportType", value)
}

// NewLogExportTypeFromValue returns a pointer to a valid LogExportType
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewLogExportTypeFromValue(v string) (*LogExportType, error) {
	ev := LogExportType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LogExportType: valid values are %v", v, AllowedLogExportTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v LogExportType) IsValid() bool {
	for _, existing := range AllowedLogExportTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LogExportType value.
func (v LogExportType) Ptr() *LogExportType {
	return &v
}
