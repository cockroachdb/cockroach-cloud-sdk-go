// Copyright 2022 The Cockroach Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// CockroachDB Cloud API
// API version: 2022-09-20

package client

import (
	"encoding/json"
)

// EnableLogExportRequest struct for EnableLogExportRequest.
type EnableLogExportRequest struct {
	Type *LogExportType `json:"type,omitempty"`
	// log_name is an identifier for the logs in the customer's log sink.
	LogName *string `json:"log_name,omitempty"`
	// auth_principal is either the AWS Role ARN that identifies a role that the cluster account can assume to write to CloudWatch or the GCP Project ID that the cluster service account has permissions to write to for cloud logging.
	AuthPrincipal        *string `json:"auth_principal,omitempty"`
	AdditionalProperties map[string]interface{}
}

type enableLogExportRequest EnableLogExportRequest

// NewEnableLogExportRequest instantiates a new EnableLogExportRequest object.
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnableLogExportRequest() *EnableLogExportRequest {
	p := EnableLogExportRequest{}
	return &p
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EnableLogExportRequest) GetType() LogExportType {
	if o == nil || o.Type == nil {
		var ret LogExportType
		return ret
	}
	return *o.Type
}

// SetType gets a reference to the given LogExportType and assigns it to the Type field.
func (o *EnableLogExportRequest) SetType(v LogExportType) {
	o.Type = &v
}

// GetLogName returns the LogName field value if set, zero value otherwise.
func (o *EnableLogExportRequest) GetLogName() string {
	if o == nil || o.LogName == nil {
		var ret string
		return ret
	}
	return *o.LogName
}

// SetLogName gets a reference to the given string and assigns it to the LogName field.
func (o *EnableLogExportRequest) SetLogName(v string) {
	o.LogName = &v
}

// GetAuthPrincipal returns the AuthPrincipal field value if set, zero value otherwise.
func (o *EnableLogExportRequest) GetAuthPrincipal() string {
	if o == nil || o.AuthPrincipal == nil {
		var ret string
		return ret
	}
	return *o.AuthPrincipal
}

// SetAuthPrincipal gets a reference to the given string and assigns it to the AuthPrincipal field.
func (o *EnableLogExportRequest) SetAuthPrincipal(v string) {
	o.AuthPrincipal = &v
}

func (o EnableLogExportRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.LogName != nil {
		toSerialize["log_name"] = o.LogName
	}
	if o.AuthPrincipal != nil {
		toSerialize["auth_principal"] = o.AuthPrincipal
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *EnableLogExportRequest) UnmarshalJSON(bytes []byte) (err error) {
	varEnableLogExportRequest := enableLogExportRequest{}

	if err = json.Unmarshal(bytes, &varEnableLogExportRequest); err == nil {
		*o = EnableLogExportRequest(varEnableLogExportRequest)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "log_name")
		delete(additionalProperties, "auth_principal")
		o.AdditionalProperties = additionalProperties
	}

	return err
}
