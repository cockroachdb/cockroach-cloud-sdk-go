// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// CockroachDB Cloud API
// API version: 2022-07-12T00:00:00.000Z

package client

import (
	"encoding/json"
	"time"
)

// Invoice Invoice message represents the details and the total charges associated with one billing period, which starts at the beginning of the month and ends at the beginning of the next month. The message also includes details about each invoice item..
type Invoice struct {
	// InvoiceID is the unique ID representing the invoice.
	InvoiceId string `json:"invoice_id"`
	// Totals is a list of the total amounts per currency.
	Totals []CurrencyAmount `json:"totals"`
	// PeriodStart is the start of the billing period (inclusive).
	PeriodStart time.Time `json:"period_start"`
	// PeriodEnd is the end of the billing period (exclusive).
	PeriodEnd time.Time `json:"period_end"`
	// InvoiceItems are sorted by the cluster name.
	InvoiceItems []InvoiceItem `json:"invoice_items"`
	// Balances are the amounts of currency left at the time of the invoice.
	Balances             []CurrencyAmount `json:"balances"`
	AdditionalProperties map[string]interface{}
}

type invoice Invoice

// NewInvoice instantiates a new Invoice object.
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvoice(invoiceId string, totals []CurrencyAmount, periodStart time.Time, periodEnd time.Time, invoiceItems []InvoiceItem, balances []CurrencyAmount) *Invoice {
	p := Invoice{}
	p.InvoiceId = invoiceId
	p.Totals = totals
	p.PeriodStart = periodStart
	p.PeriodEnd = periodEnd
	p.InvoiceItems = invoiceItems
	p.Balances = balances
	return &p
}

// NewInvoiceWithDefaults instantiates a new Invoice object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvoiceWithDefaults() *Invoice {
	p := Invoice{}
	return &p
}

// GetInvoiceId returns the InvoiceId field value.
func (o *Invoice) GetInvoiceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InvoiceId
}

// SetInvoiceId sets field value.
func (o *Invoice) SetInvoiceId(v string) {
	o.InvoiceId = v
}

// GetTotals returns the Totals field value.
func (o *Invoice) GetTotals() []CurrencyAmount {
	if o == nil {
		var ret []CurrencyAmount
		return ret
	}

	return o.Totals
}

// SetTotals sets field value.
func (o *Invoice) SetTotals(v []CurrencyAmount) {
	o.Totals = v
}

// GetPeriodStart returns the PeriodStart field value.
func (o *Invoice) GetPeriodStart() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.PeriodStart
}

// SetPeriodStart sets field value.
func (o *Invoice) SetPeriodStart(v time.Time) {
	o.PeriodStart = v
}

// GetPeriodEnd returns the PeriodEnd field value.
func (o *Invoice) GetPeriodEnd() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.PeriodEnd
}

// SetPeriodEnd sets field value.
func (o *Invoice) SetPeriodEnd(v time.Time) {
	o.PeriodEnd = v
}

// GetInvoiceItems returns the InvoiceItems field value.
func (o *Invoice) GetInvoiceItems() []InvoiceItem {
	if o == nil {
		var ret []InvoiceItem
		return ret
	}

	return o.InvoiceItems
}

// SetInvoiceItems sets field value.
func (o *Invoice) SetInvoiceItems(v []InvoiceItem) {
	o.InvoiceItems = v
}

// GetBalances returns the Balances field value.
func (o *Invoice) GetBalances() []CurrencyAmount {
	if o == nil {
		var ret []CurrencyAmount
		return ret
	}

	return o.Balances
}

// SetBalances sets field value.
func (o *Invoice) SetBalances(v []CurrencyAmount) {
	o.Balances = v
}

func (o Invoice) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["invoice_id"] = o.InvoiceId
	}
	if true {
		toSerialize["totals"] = o.Totals
	}
	if true {
		toSerialize["period_start"] = o.PeriodStart
	}
	if true {
		toSerialize["period_end"] = o.PeriodEnd
	}
	if true {
		toSerialize["invoice_items"] = o.InvoiceItems
	}
	if true {
		toSerialize["balances"] = o.Balances
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Invoice) UnmarshalJSON(bytes []byte) (err error) {
	varInvoice := invoice{}

	if err = json.Unmarshal(bytes, &varInvoice); err == nil {
		*o = Invoice(varInvoice)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "invoice_id")
		delete(additionalProperties, "totals")
		delete(additionalProperties, "period_start")
		delete(additionalProperties, "period_end")
		delete(additionalProperties, "invoice_items")
		delete(additionalProperties, "balances")
		o.AdditionalProperties = additionalProperties
	}

	return err
}
