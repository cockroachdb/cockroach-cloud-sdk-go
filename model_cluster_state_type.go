/*
CockroachDB Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-12-28
Contact: support@cockroachlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ClusterStateType  - CLUSTER_STATE_LOCKED: An exclusive operation is being performed on this cluster. Other operations should not proceed if they did not set a cluster into the LOCKED state.
type ClusterStateType string

// List of ClusterStateType
const (
	UNSPECIFIED ClusterStateType = "CLUSTER_STATE_UNSPECIFIED"
	CREATING ClusterStateType = "CLUSTER_STATE_CREATING"
	CREATED ClusterStateType = "CLUSTER_STATE_CREATED"
	CREATION_FAILED ClusterStateType = "CLUSTER_STATE_CREATION_FAILED"
	DELETED ClusterStateType = "CLUSTER_STATE_DELETED"
	LOCKED ClusterStateType = "CLUSTER_STATE_LOCKED"
)

// All allowed values of ClusterStateType enum
var AllowedClusterStateTypeEnumValues = []ClusterStateType{
	"CLUSTER_STATE_UNSPECIFIED",
	"CLUSTER_STATE_CREATING",
	"CLUSTER_STATE_CREATED",
	"CLUSTER_STATE_CREATION_FAILED",
	"CLUSTER_STATE_DELETED",
	"CLUSTER_STATE_LOCKED",
}

func (v *ClusterStateType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClusterStateType(value)
	for _, existing := range AllowedClusterStateTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClusterStateType", value)
}

// NewClusterStateTypeFromValue returns a pointer to a valid ClusterStateType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClusterStateTypeFromValue(v string) (*ClusterStateType, error) {
	ev := ClusterStateType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClusterStateType: valid values are %v", v, AllowedClusterStateTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClusterStateType) IsValid() bool {
	for _, existing := range AllowedClusterStateTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ClusterStateType value
func (v ClusterStateType) Ptr() *ClusterStateType {
	return &v
}

type NullableClusterStateType struct {
	value *ClusterStateType
	isSet bool
}

func (v NullableClusterStateType) Get() *ClusterStateType {
	return v.value
}

func (v *NullableClusterStateType) Set(val *ClusterStateType) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterStateType) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterStateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterStateType(val *ClusterStateType) *NullableClusterStateType {
	return &NullableClusterStateType{value: val, isSet: true}
}

func (v NullableClusterStateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterStateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

