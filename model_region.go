/*
CockroachDB Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-12-28
Contact: support@cockroachlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Region struct for Region
type Region struct {
	Name string `json:"name"`
	SqlDns string `json:"sql_dns"`
	UiDns string `json:"ui_dns"`
	// NodeCount will be 0 for serverless clusters.
	NodeCount int32 `json:"node_count"`
}

// NewRegion instantiates a new Region object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegion(name string, sqlDns string, uiDns string, nodeCount int32) *Region {
	this := Region{}
	this.Name = name
	this.SqlDns = sqlDns
	this.UiDns = uiDns
	this.NodeCount = nodeCount
	return &this
}

// NewRegionWithDefaults instantiates a new Region object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionWithDefaults() *Region {
	this := Region{}
	return &this
}

// GetName returns the Name field value
func (o *Region) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Region) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Region) SetName(v string) {
	o.Name = v
}

// GetSqlDns returns the SqlDns field value
func (o *Region) GetSqlDns() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SqlDns
}

// GetSqlDnsOk returns a tuple with the SqlDns field value
// and a boolean to check if the value has been set.
func (o *Region) GetSqlDnsOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SqlDns, true
}

// SetSqlDns sets field value
func (o *Region) SetSqlDns(v string) {
	o.SqlDns = v
}

// GetUiDns returns the UiDns field value
func (o *Region) GetUiDns() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UiDns
}

// GetUiDnsOk returns a tuple with the UiDns field value
// and a boolean to check if the value has been set.
func (o *Region) GetUiDnsOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UiDns, true
}

// SetUiDns sets field value
func (o *Region) SetUiDns(v string) {
	o.UiDns = v
}

// GetNodeCount returns the NodeCount field value
func (o *Region) GetNodeCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NodeCount
}

// GetNodeCountOk returns a tuple with the NodeCount field value
// and a boolean to check if the value has been set.
func (o *Region) GetNodeCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NodeCount, true
}

// SetNodeCount sets field value
func (o *Region) SetNodeCount(v int32) {
	o.NodeCount = v
}

func (o Region) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["sql_dns"] = o.SqlDns
	}
	if true {
		toSerialize["ui_dns"] = o.UiDns
	}
	if true {
		toSerialize["node_count"] = o.NodeCount
	}
	return json.Marshal(toSerialize)
}

type NullableRegion struct {
	value *Region
	isSet bool
}

func (v NullableRegion) Get() *Region {
	return v.value
}

func (v *NullableRegion) Set(val *Region) {
	v.value = val
	v.isSet = true
}

func (v NullableRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegion(val *Region) *NullableRegion {
	return &NullableRegion{value: val, isSet: true}
}

func (v NullableRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


