/*
CockroachDB Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-12-28
Contact: support@cockroachlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CMEKClusterSpecification struct for CMEKClusterSpecification
type CMEKClusterSpecification struct {
	RegionSpecs []CMEKRegionSpecification `json:"region_specs"`
}

// NewCMEKClusterSpecification instantiates a new CMEKClusterSpecification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCMEKClusterSpecification(regionSpecs []CMEKRegionSpecification) *CMEKClusterSpecification {
	this := CMEKClusterSpecification{}
	this.RegionSpecs = regionSpecs
	return &this
}

// NewCMEKClusterSpecificationWithDefaults instantiates a new CMEKClusterSpecification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCMEKClusterSpecificationWithDefaults() *CMEKClusterSpecification {
	this := CMEKClusterSpecification{}
	return &this
}

// GetRegionSpecs returns the RegionSpecs field value
func (o *CMEKClusterSpecification) GetRegionSpecs() []CMEKRegionSpecification {
	if o == nil {
		var ret []CMEKRegionSpecification
		return ret
	}

	return o.RegionSpecs
}

// GetRegionSpecsOk returns a tuple with the RegionSpecs field value
// and a boolean to check if the value has been set.
func (o *CMEKClusterSpecification) GetRegionSpecsOk() ([]CMEKRegionSpecification, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RegionSpecs, true
}

// SetRegionSpecs sets field value
func (o *CMEKClusterSpecification) SetRegionSpecs(v []CMEKRegionSpecification) {
	o.RegionSpecs = v
}

func (o CMEKClusterSpecification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["region_specs"] = o.RegionSpecs
	}
	return json.Marshal(toSerialize)
}

type NullableCMEKClusterSpecification struct {
	value *CMEKClusterSpecification
	isSet bool
}

func (v NullableCMEKClusterSpecification) Get() *CMEKClusterSpecification {
	return v.value
}

func (v *NullableCMEKClusterSpecification) Set(val *CMEKClusterSpecification) {
	v.value = val
	v.isSet = true
}

func (v NullableCMEKClusterSpecification) IsSet() bool {
	return v.isSet
}

func (v *NullableCMEKClusterSpecification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCMEKClusterSpecification(val *CMEKClusterSpecification) *NullableCMEKClusterSpecification {
	return &NullableCMEKClusterSpecification{value: val, isSet: true}
}

func (v NullableCMEKClusterSpecification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCMEKClusterSpecification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


