/*
CockroachDB Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-12-28
Contact: support@cockroachlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Plan  - PLAN_DEDICATED: A paid plan that offers dedicated hardware in any location.  - PLAN_CUSTOM: A plan option that is used for clusters whose machine configs are not  supported in self-service. All INVOICE clusters are under this plan option.  - PLAN_SERVERLESS: A paid plan that runs on shared hardware and caps the users' maximum monthly spending to a user-specified (possibly 0) amount.
type Plan string

// List of Plan
const (
	UNSPECIFIED Plan = "PLAN_UNSPECIFIED"
	DEDICATED Plan = "PLAN_DEDICATED"
	CUSTOM Plan = "PLAN_CUSTOM"
	SERVERLESS Plan = "PLAN_SERVERLESS"
)

// All allowed values of Plan enum
var AllowedPlanEnumValues = []Plan{
	"PLAN_UNSPECIFIED",
	"PLAN_DEDICATED",
	"PLAN_CUSTOM",
	"PLAN_SERVERLESS",
}

func (v *Plan) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Plan(value)
	for _, existing := range AllowedPlanEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Plan", value)
}

// NewPlanFromValue returns a pointer to a valid Plan
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPlanFromValue(v string) (*Plan, error) {
	ev := Plan(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Plan: valid values are %v", v, AllowedPlanEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Plan) IsValid() bool {
	for _, existing := range AllowedPlanEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Plan value
func (v Plan) Ptr() *Plan {
	return &v
}

type NullablePlan struct {
	value *Plan
	isSet bool
}

func (v NullablePlan) Get() *Plan {
	return v.value
}

func (v *NullablePlan) Set(val *Plan) {
	v.value = val
	v.isSet = true
}

func (v NullablePlan) IsSet() bool {
	return v.isSet
}

func (v *NullablePlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlan(val *Plan) *NullablePlan {
	return &NullablePlan{value: val, isSet: true}
}

func (v NullablePlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

