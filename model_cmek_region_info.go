/*
CockroachDB Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-12-28
Contact: support@cockroachlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CMEKRegionInfo CMEKRegionInfo contains the status of CMEK within a region. This includes current and past key specifications used within the region, as well as the status of those specifications.
type CMEKRegionInfo struct {
	Region *string `json:"region,omitempty"`
	KeyInfos []CMEKKeyInfo `json:"key_infos,omitempty"`
}

// NewCMEKRegionInfo instantiates a new CMEKRegionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCMEKRegionInfo() *CMEKRegionInfo {
	this := CMEKRegionInfo{}
	return &this
}

// NewCMEKRegionInfoWithDefaults instantiates a new CMEKRegionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCMEKRegionInfoWithDefaults() *CMEKRegionInfo {
	this := CMEKRegionInfo{}
	return &this
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *CMEKRegionInfo) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CMEKRegionInfo) GetRegionOk() (*string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *CMEKRegionInfo) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *CMEKRegionInfo) SetRegion(v string) {
	o.Region = &v
}

// GetKeyInfos returns the KeyInfos field value if set, zero value otherwise.
func (o *CMEKRegionInfo) GetKeyInfos() []CMEKKeyInfo {
	if o == nil || o.KeyInfos == nil {
		var ret []CMEKKeyInfo
		return ret
	}
	return o.KeyInfos
}

// GetKeyInfosOk returns a tuple with the KeyInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CMEKRegionInfo) GetKeyInfosOk() ([]CMEKKeyInfo, bool) {
	if o == nil || o.KeyInfos == nil {
		return nil, false
	}
	return o.KeyInfos, true
}

// HasKeyInfos returns a boolean if a field has been set.
func (o *CMEKRegionInfo) HasKeyInfos() bool {
	if o != nil && o.KeyInfos != nil {
		return true
	}

	return false
}

// SetKeyInfos gets a reference to the given []CMEKKeyInfo and assigns it to the KeyInfos field.
func (o *CMEKRegionInfo) SetKeyInfos(v []CMEKKeyInfo) {
	o.KeyInfos = v
}

func (o CMEKRegionInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}
	if o.KeyInfos != nil {
		toSerialize["key_infos"] = o.KeyInfos
	}
	return json.Marshal(toSerialize)
}

type NullableCMEKRegionInfo struct {
	value *CMEKRegionInfo
	isSet bool
}

func (v NullableCMEKRegionInfo) Get() *CMEKRegionInfo {
	return v.value
}

func (v *NullableCMEKRegionInfo) Set(val *CMEKRegionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCMEKRegionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCMEKRegionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCMEKRegionInfo(val *CMEKRegionInfo) *NullableCMEKRegionInfo {
	return &NullableCMEKRegionInfo{value: val, isSet: true}
}

func (v NullableCMEKRegionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCMEKRegionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


