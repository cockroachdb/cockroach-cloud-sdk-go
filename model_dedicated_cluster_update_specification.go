/*
CockroachDB Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-12-28
Contact: support@cockroachlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DedicatedClusterUpdateSpecification struct for DedicatedClusterUpdateSpecification
type DedicatedClusterUpdateSpecification struct {
	// Region keys should match the cloud provider's zone code. For example, for Oregon, set region_name to \"us-west2\" for GCP and \"us-west-2\" for AWS. Values represent the node count.
	RegionNodes *map[string]int32 `json:"region_nodes,omitempty"`
	Hardware *DedicatedHardwareUpdateSpecification `json:"hardware,omitempty"`
}

// NewDedicatedClusterUpdateSpecification instantiates a new DedicatedClusterUpdateSpecification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDedicatedClusterUpdateSpecification() *DedicatedClusterUpdateSpecification {
	this := DedicatedClusterUpdateSpecification{}
	return &this
}

// NewDedicatedClusterUpdateSpecificationWithDefaults instantiates a new DedicatedClusterUpdateSpecification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDedicatedClusterUpdateSpecificationWithDefaults() *DedicatedClusterUpdateSpecification {
	this := DedicatedClusterUpdateSpecification{}
	return &this
}

// GetRegionNodes returns the RegionNodes field value if set, zero value otherwise.
func (o *DedicatedClusterUpdateSpecification) GetRegionNodes() map[string]int32 {
	if o == nil || o.RegionNodes == nil {
		var ret map[string]int32
		return ret
	}
	return *o.RegionNodes
}

// GetRegionNodesOk returns a tuple with the RegionNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DedicatedClusterUpdateSpecification) GetRegionNodesOk() (*map[string]int32, bool) {
	if o == nil || o.RegionNodes == nil {
		return nil, false
	}
	return o.RegionNodes, true
}

// HasRegionNodes returns a boolean if a field has been set.
func (o *DedicatedClusterUpdateSpecification) HasRegionNodes() bool {
	if o != nil && o.RegionNodes != nil {
		return true
	}

	return false
}

// SetRegionNodes gets a reference to the given map[string]int32 and assigns it to the RegionNodes field.
func (o *DedicatedClusterUpdateSpecification) SetRegionNodes(v map[string]int32) {
	o.RegionNodes = &v
}

// GetHardware returns the Hardware field value if set, zero value otherwise.
func (o *DedicatedClusterUpdateSpecification) GetHardware() DedicatedHardwareUpdateSpecification {
	if o == nil || o.Hardware == nil {
		var ret DedicatedHardwareUpdateSpecification
		return ret
	}
	return *o.Hardware
}

// GetHardwareOk returns a tuple with the Hardware field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DedicatedClusterUpdateSpecification) GetHardwareOk() (*DedicatedHardwareUpdateSpecification, bool) {
	if o == nil || o.Hardware == nil {
		return nil, false
	}
	return o.Hardware, true
}

// HasHardware returns a boolean if a field has been set.
func (o *DedicatedClusterUpdateSpecification) HasHardware() bool {
	if o != nil && o.Hardware != nil {
		return true
	}

	return false
}

// SetHardware gets a reference to the given DedicatedHardwareUpdateSpecification and assigns it to the Hardware field.
func (o *DedicatedClusterUpdateSpecification) SetHardware(v DedicatedHardwareUpdateSpecification) {
	o.Hardware = &v
}

func (o DedicatedClusterUpdateSpecification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RegionNodes != nil {
		toSerialize["region_nodes"] = o.RegionNodes
	}
	if o.Hardware != nil {
		toSerialize["hardware"] = o.Hardware
	}
	return json.Marshal(toSerialize)
}

type NullableDedicatedClusterUpdateSpecification struct {
	value *DedicatedClusterUpdateSpecification
	isSet bool
}

func (v NullableDedicatedClusterUpdateSpecification) Get() *DedicatedClusterUpdateSpecification {
	return v.value
}

func (v *NullableDedicatedClusterUpdateSpecification) Set(val *DedicatedClusterUpdateSpecification) {
	v.value = val
	v.isSet = true
}

func (v NullableDedicatedClusterUpdateSpecification) IsSet() bool {
	return v.isSet
}

func (v *NullableDedicatedClusterUpdateSpecification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDedicatedClusterUpdateSpecification(val *DedicatedClusterUpdateSpecification) *NullableDedicatedClusterUpdateSpecification {
	return &NullableDedicatedClusterUpdateSpecification{value: val, isSet: true}
}

func (v NullableDedicatedClusterUpdateSpecification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDedicatedClusterUpdateSpecification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


