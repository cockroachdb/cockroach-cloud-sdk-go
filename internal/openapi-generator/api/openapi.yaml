openapi: 3.0.0
info:
  contact:
    email: support@cockroachlabs.com
    name: Cockroach Labs Support
    url: https://support.cockroachlabs.com
  description: An API for managing CockroachDB Cloud resources
  title: CockroachDB Cloud API
  version: 2023-04-10
externalDocs:
  description: Use the CockroachDB Cloud API
  url: https://www.cockroachlabs.com/docs/cockroachcloud/cloud-api.html
servers:
- url: https://cockroachlabs.cloud
security:
- Bearer: []
tags:
- name: CockroachCloud
paths:
  /api/scim/v2/Groups:
    get:
      operationId: CockroachCloud_GetGroups
      parameters:
      - explode: true
        in: query
        name: attributes
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: excludedAttributes
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetGroupsResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Gets groups based on query parameters
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://cockroachlabs.cloud/api/scim/v2/Groups?attributes=SOME_STRING_VALUE&excludedAttributes=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
    post:
      operationId: CockroachCloud_CreateGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScimGroup'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Creates a group
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://cockroachlabs.cloud/api/scim/v2/Groups \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"displayName":"Test SCIM","members":[],"schemas":["urn:ietf:params:scim:schemas:core:2.0:Group"]}'
  /api/scim/v2/Groups/.search:
    put:
      operationId: CockroachCloud_GetGroups2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetGroupsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetGroupsResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Gets groups based on query parameters
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request PUT \
            --url https://cockroachlabs.cloud/api/scim/v2/Groups/.search \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"attributes":"string","excludedAttributes":"string"}'
  /api/scim/v2/Groups/{id}:
    delete:
      operationId: CockroachCloud_DeleteGroup
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Deletes a group based on id
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request DELETE \
            --url https://cockroachlabs.cloud/api/scim/v2/Groups/{id} \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
    get:
      operationId: CockroachCloud_GetGroup
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: attributes
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: excludedAttributes
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScimGroup'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Gets a group based on id
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://cockroachlabs.cloud/api/scim/v2/Groups/{id}?attributes=SOME_STRING_VALUE&excludedAttributes=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
    patch:
      operationId: CockroachCloud_PatchGroup
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchGroupRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScimGroup'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Updates a group by specifying individual values to update
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request PATCH \
            --url https://cockroachlabs.cloud/api/scim/v2/Groups/{id} \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"Operations":[{"op":"string","path":"string","value":{"@type":"string","property1":null,"property2":null}}],"schemas":["string"]}'
    put:
      operationId: CockroachCloud_UpdateGroup
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScimGroup'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Updates a group by supplying all values of the user object
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request PUT \
            --url https://cockroachlabs.cloud/api/scim/v2/Groups/{id} \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"displayName":"Test SCIM","id":"23a35c27-23d3-4c03-b4c5-6443c09e7173","members":[{"display":"croach@example.com","value":"45a35c27-23d3-4d03-c4c5-9043c09e7175"}],"schemas":["urn:ietf:params:scim:schemas:core:2.0:Group"]}'
  /api/scim/v2/Groups/{id}/.search:
    put:
      operationId: CockroachCloud_GetGroup2
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetGroupRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScimGroup'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Gets a group based on id
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request PUT \
            --url https://cockroachlabs.cloud/api/scim/v2/Groups/{id}/.search \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"attributes":"string","excludedAttributes":"string"}'
  /api/scim/v2/ResourceTypes:
    get:
      operationId: CockroachCloud_GetResourceTypes
      parameters:
      - explode: true
        in: query
        name: attributes
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: excludedAttributes
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResourceTypesResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://cockroachlabs.cloud/api/scim/v2/ResourceTypes?attributes=SOME_STRING_VALUE&excludedAttributes=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
  /api/scim/v2/ResourceTypes/{resourceId}:
    get:
      operationId: CockroachCloud_GetResourceType
      parameters:
      - explode: false
        in: path
        name: resourceId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: attributes
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: excludedAttributes
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScimResourceType'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://cockroachlabs.cloud/api/scim/v2/ResourceTypes/{resourceId}?attributes=SOME_STRING_VALUE&excludedAttributes=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
  /api/scim/v2/Schemas:
    get:
      operationId: CockroachCloud_GetSchemas
      parameters:
      - explode: true
        in: query
        name: attributes
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: excludedAttributes
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSchemasResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://cockroachlabs.cloud/api/scim/v2/Schemas?attributes=SOME_STRING_VALUE&excludedAttributes=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
  /api/scim/v2/Schemas/{schemaId}:
    get:
      operationId: CockroachCloud_GetSchema
      parameters:
      - explode: false
        in: path
        name: schemaId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: attributes
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: excludedAttributes
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScimSchema'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://cockroachlabs.cloud/api/scim/v2/Schemas/{schemaId}?attributes=SOME_STRING_VALUE&excludedAttributes=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
  /api/scim/v2/ServiceProviderConfig:
    get:
      operationId: CockroachCloud_GetServiceProviderConfig
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetServiceProviderConfigResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Returns our SCIM configuration
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://cockroachlabs.cloud/api/scim/v2/ServiceProviderConfig \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
  /api/scim/v2/Users:
    get:
      operationId: CockroachCloud_GetUsers
      parameters:
      - explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: attributes
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: excludedAttributes
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsersResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Gets Users based on query parameters
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://cockroachlabs.cloud/api/scim/v2/Users?filter=SOME_STRING_VALUE&attributes=SOME_STRING_VALUE&excludedAttributes=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
    post:
      operationId: CockroachCloud_CreateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScimUser'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Creates a user
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://cockroachlabs.cloud/api/scim/v2/Users \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"active":true,"displayName":"Carl Roach","emails":[{"primary":true,"type":"work","value":"croach@example.com"}],"externalId":"11ujl29u0le5T6Aj10h9","name":{"familyName":"Roach","givenName":"Carl"},"schemas":["urn:ietf:params:scim:schemas:core:2.0:User"],"userName":"croach@example.com"}'
  /api/scim/v2/Users/.search:
    put:
      operationId: CockroachCloud_GetUsers2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetUsersRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsersResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Gets Users based on query parameters
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request PUT \
            --url https://cockroachlabs.cloud/api/scim/v2/Users/.search \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"attributes":"string","excludedAttributes":"string","filter":"string"}'
  /api/scim/v2/Users/{id}:
    delete:
      operationId: CockroachCloud_DeleteUser
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Deletes a user based on id
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request DELETE \
            --url https://cockroachlabs.cloud/api/scim/v2/Users/{id} \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
    get:
      operationId: CockroachCloud_GetUser
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: attributes
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: excludedAttributes
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScimUser'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Gets a user based on id
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://cockroachlabs.cloud/api/scim/v2/Users/{id}?attributes=SOME_STRING_VALUE&excludedAttributes=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
    patch:
      operationId: CockroachCloud_PatchUser
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUserRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScimUser'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Updates a user by specifying individual values to update
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request PATCH \
            --url https://cockroachlabs.cloud/api/scim/v2/Users/{id} \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"Operations":[{"op":"string","path":"string","value":{"@type":"string","property1":null,"property2":null}}],"schemas":["string"]}'
    put:
      operationId: CockroachCloud_UpdateUser
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScimUser'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Updates a user by supplying all values of the user object
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request PUT \
            --url https://cockroachlabs.cloud/api/scim/v2/Users/{id} \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"active":true,"emails":[{"display":"croach@example.com","primary":true,"type":"work","value":"croach@example.com"}],"name":{"familyName":"Roach","givenName":"Carl"},"schemas":["urn:ietf:params:scim:schemas:core:2.0:User"]}'
  /api/scim/v2/Users/{id}/.search:
    put:
      operationId: CockroachCloud_GetUser2
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetUserRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScimUser'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Gets a user based on id
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request PUT \
            --url https://cockroachlabs.cloud/api/scim/v2/Users/{id}/.search \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"attributes":"string","excludedAttributes":"string"}'
  /api/v1/auditlogevents:
    get:
      operationId: CockroachCloud_ListAuditLogs
      parameters:
      - description: |-
          starting_from is the (exclusive) timestamp from which log entries will be
          returned in the response based on their created_at time, respecting the
          sort order specified in pagination. If unset, the default will be the
          current time if results are returned in descending order and the
          beginning of time if results are in ascending order.
        explode: true
        in: query
        name: starting_from
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          sort_order is the direction of pagination, with starting_from as the
          start point. If unset, the default is ascending order.

           - ASC: Sort in ascending order. This is the default unless otherwise specified.
           - DESC: Sort in descending order.
        explode: true
        in: query
        name: sort_order
        required: false
        schema:
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: |-
          limit is the number of entries requested in the response. Note that the
          response may still contain slightly more results, since the response will
          always contain every entry at a particular timestamp.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAuditLogsResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: "Limited Access: List audit logs."
      tags:
      - CockroachCloud
      x-badges:
      - color: red
        label: LIMITED ACCESS
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://cockroachlabs.cloud/api/v1/auditlogevents?starting_from=SOME_STRING_VALUE&sort_order=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
  /api/v1/cluster-versions:
    get:
      description: "Sort order: Version number descending"
      operationId: CockroachCloud_ListMajorClusterVersions
      parameters:
      - explode: true
        in: query
        name: pagination.page
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: pagination.limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: pagination.as_of_time
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |2-
           - ASC: Sort in ascending order. This is the default unless otherwise specified.
           - DESC: Sort in descending order.
        explode: true
        in: query
        name: pagination.sort_order
        required: false
        schema:
          enum:
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMajorClusterVersionsResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: List available major cluster versions
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://cockroachlabs.cloud/api/v1/cluster-versions?pagination.page=SOME_STRING_VALUE&pagination.limit=SOME_INTEGER_VALUE&pagination.as_of_time=SOME_STRING_VALUE&pagination.sort_order=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
  /api/v1/clusters:
    get:
      description: "Sort order: Cluster name"
      operationId: CockroachCloud_ListClusters
      parameters:
      - description: "If `true`, show clusters that have been deleted or failed to\
          \ initialize."
        explode: true
        in: query
        name: show_inactive
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - explode: true
        in: query
        name: pagination.page
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: pagination.limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: pagination.as_of_time
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |2-
           - ASC: Sort in ascending order. This is the default unless otherwise specified.
           - DESC: Sort in descending order.
        explode: true
        in: query
        name: pagination.sort_order
        required: false
        schema:
          enum:
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListClustersResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: List clusters owned by an organization
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://cockroachlabs.cloud/api/v1/clusters?show_inactive=SOME_BOOLEAN_VALUE&pagination.page=SOME_STRING_VALUE&pagination.limit=SOME_INTEGER_VALUE&pagination.as_of_time=SOME_STRING_VALUE&pagination.sort_order=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
    post:
      operationId: CockroachCloud_CreateCluster
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClusterRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Create and initialize a new cluster
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://cockroachlabs.cloud/api/v1/clusters \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"name":"test-cluster","provider":"GCP","spec":{"serverless":{"regions":["us-central1"],"spend_limit":0}}}'
  /api/v1/clusters/available-regions:
    get:
      description: "Sort order: Distance (based on client IP address)"
      operationId: CockroachCloud_ListAvailableRegions
      parameters:
      - description: |-
          Optional CloudProvider for filtering.

           - GCP: The Google Cloud Platform cloud provider.
           - AWS: The Amazon Web Services cloud provider.
           - AZURE: Limited Access: The Azure cloud provider.
        explode: true
        in: query
        name: provider
        required: false
        schema:
          enum:
          - GCP
          - AWS
          - AZURE
          type: string
        style: form
      - description: Optional filter to only show regions available for serverless
          clusters.
        explode: true
        in: query
        name: serverless
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - explode: true
        in: query
        name: pagination.page
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: pagination.limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: pagination.as_of_time
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |2-
           - ASC: Sort in ascending order. This is the default unless otherwise specified.
           - DESC: Sort in descending order.
        explode: true
        in: query
        name: pagination.sort_order
        required: false
        schema:
          enum:
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAvailableRegionsResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: List the regions available for new clusters and nodes
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://cockroachlabs.cloud/api/v1/clusters/available-regions?provider=SOME_STRING_VALUE&serverless=SOME_BOOLEAN_VALUE&pagination.page=SOME_STRING_VALUE&pagination.limit=SOME_INTEGER_VALUE&pagination.as_of_time=SOME_STRING_VALUE&pagination.sort_order=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
  /api/v1/clusters/{cluster_id}:
    delete:
      operationId: CockroachCloud_DeleteCluster
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Delete a cluster and all of its data
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request DELETE \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id} \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
    get:
      operationId: CockroachCloud_GetCluster
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Get extended information about a cluster
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id} \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
    patch:
      operationId: CockroachCloud_UpdateCluster
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClusterSpecification'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Scale or edit a cluster
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request PATCH \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id} \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"dedicated":{"hardware":{"machine_spec":{"machine_type":"n2-standard-8"}},"region_nodes":{"us-central1":5,"us-west1":3}},"upgrade_status":"UPGRADE_RUNNING"}'
  /api/v1/clusters/{cluster_id}/client-ca-cert:
    delete:
      operationId: CockroachCloud_DeleteClientCACert
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientCACertInfo'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Delete Client CA Cert for a cluster
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request DELETE \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/client-ca-cert \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
    get:
      operationId: CockroachCloud_GetClientCACert
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientCACertInfo'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Get Client CA Cert information for a cluster
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/client-ca-cert \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
    patch:
      operationId: CockroachCloud_UpdateClientCACert
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClientCACertRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientCACertInfo'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Update Client CA Cert for a cluster
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request PATCH \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/client-ca-cert \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"x509_pem_cert":"-----BEGIN CERTIFICATE-----..."}'
    post:
      operationId: CockroachCloud_SetClientCACert
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetClientCACertRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientCACertInfo'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Set Client CA Cert for a cluster
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/client-ca-cert \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"x509_pem_cert":"-----BEGIN CERTIFICATE-----..."}'
  /api/v1/clusters/{cluster_id}/cmek:
    get:
      operationId: CockroachCloud_GetCMEKClusterInfo
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMEKClusterInfo'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Get CMEK-related information for a cluster
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/cmek \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
    patch:
      operationId: CockroachCloud_UpdateCMEKStatus
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCMEKStatusRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMEKClusterInfo'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Update the CMEK-related status for a cluster
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request PATCH \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/cmek \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"action":"REVOKE"}'
    post:
      operationId: CockroachCloud_EnableCMEKSpec
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMEKClusterSpecification'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMEKClusterInfo'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Enable CMEK for a cluster
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/cmek \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --data '{"region_specs":[{"key_spec":{"auth_principal":"arn:aws:iam::account:role/role-name-with-path","type":"AWS_KMS","uri":"arn:aws:kms:us-west-2:111122223333:key/id-of-kms-key"},"region":"us-central1"}]}'
    put:
      operationId: CockroachCloud_UpdateCMEKSpec
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CMEKClusterSpecification'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMEKClusterInfo'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Enable or update the CMEK spec for a cluster
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request PUT \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/cmek \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --data '{"region_specs":[{"key_spec":{"auth_principal":"arn:aws:iam::account:role/role-name-with-path","type":"AWS_KMS","uri":"arn:aws:kms:us-west-2:111122223333:key/id-of-kms-key"},"region":"us-central1"}]}'
  /api/v1/clusters/{cluster_id}/connection-string:
    get:
      operationId: CockroachCloud_GetConnectionString
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: database
        required: false
        schema:
          default: defaultdb
          type: string
        style: form
      - explode: true
        in: query
        name: sql_user
        required: false
        schema:
          type: string
        style: form
      - description: |-
          os indicates the target operating system, used with formatting the default SSL certificate path.
          Required only for dedicated clusters.
        explode: true
        in: query
        name: os
        required: false
        schema:
          enum:
          - MAC
          - LINUX
          - WINDOWS
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConnectionStringResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Get a formatted generic connection string for a cluster
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/connection-string?database=SOME_STRING_VALUE&sql_user=SOME_STRING_VALUE&os=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
  /api/v1/clusters/{cluster_id}/databases:
    get:
      description: "Sort order: Database name ascending"
      operationId: CockroachCloud_ListDatabases
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: pagination.page
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: pagination.limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: pagination.as_of_time
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |2-
           - ASC: Sort in ascending order. This is the default unless otherwise specified.
           - DESC: Sort in descending order.
        explode: true
        in: query
        name: pagination.sort_order
        required: false
        schema:
          enum:
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api.ListDatabasesResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: List databases for a cluster
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/databases?pagination.page=SOME_STRING_VALUE&pagination.limit=SOME_INTEGER_VALUE&pagination.as_of_time=SOME_STRING_VALUE&pagination.sort_order=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
    patch:
      operationId: CockroachCloud_EditDatabase2
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDatabaseRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api.Database'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Update a database
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request PATCH \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/databases \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"name":"example_database_name","new_name":"example_new_database_name"}'
    post:
      operationId: CockroachCloud_CreateDatabase
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDatabaseRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api.Database'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Create a new database
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/databases \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"name":"example_database_name"}'
  /api/v1/clusters/{cluster_id}/databases/{name}:
    delete:
      operationId: CockroachCloud_DeleteDatabase
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api.Database'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Delete a database
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request DELETE \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/databases/{name} \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
    patch:
      operationId: CockroachCloud_EditDatabase
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDatabaseRequest_1'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api.Database'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Update a database
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request PATCH \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/databases/{name} \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"name":"example_database_name","new_name":"example_new_database_name"}'
  /api/v1/clusters/{cluster_id}/logexport:
    delete:
      operationId: CockroachCloud_DeleteLogExport
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogExportClusterInfo'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Delete the Log Export configuration for a cluster
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request DELETE \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/logexport \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
    get:
      operationId: CockroachCloud_GetLogExportInfo
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogExportClusterInfo'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Get the Log Export configuration for a cluster
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/logexport \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
    post:
      operationId: CockroachCloud_EnableLogExport
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnableLogExportRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogExportClusterInfo'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Create or update the Log Export configuration for a cluster
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/logexport \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"auth_principal":"my-gcp-project-id","groups":[{"channels":["OPS","HEALTH"],"log_name":"devops","min_level":"WARNING"}],"log_name":"default","redact":true,"type":"GCP_CLOUD_LOGGING"}'
  /api/v1/clusters/{cluster_id}/metricexport/cloudwatch:
    delete:
      operationId: CockroachCloud_DeleteCloudWatchMetricExport
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteMetricExportResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Delete the CloudWatch Metric Export configuration for a cluster
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request DELETE \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/metricexport/cloudwatch \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
    get:
      operationId: CockroachCloud_GetCloudWatchMetricExportInfo
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudWatchMetricExportInfo'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Get the CloudWatch Metric Export configuration for a cluster
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/metricexport/cloudwatch \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
    post:
      operationId: CockroachCloud_EnableCloudWatchMetricExport
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnableCloudWatchMetricExportRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudWatchMetricExportInfo'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Create or update the CloudWatch Metric Export configuration for a cluster
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/metricexport/cloudwatch \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"log_group_name":"example","role_arn":"arn:aws:iam::account:role/ExampleRole","target_region":"us-east-1"}'
  /api/v1/clusters/{cluster_id}/metricexport/datadog:
    delete:
      operationId: CockroachCloud_DeleteDatadogMetricExport
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteMetricExportResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Delete the Datadog Metric Export configuration for a cluster
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request DELETE \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/metricexport/datadog \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
    get:
      operationId: CockroachCloud_GetDatadogMetricExportInfo
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatadogMetricExportInfo'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Get the Datadog Metric Export configuration for a cluster
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/metricexport/datadog \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
    post:
      operationId: CockroachCloud_EnableDatadogMetricExport
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnableDatadogMetricExportRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatadogMetricExportInfo'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Create or update the Datadog Metric Export configuration for a cluster
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/metricexport/datadog \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"api_key":"datadog_api_key","site":"US1"}'
  /api/v1/clusters/{cluster_id}/networking/allowlist:
    get:
      description: "Sort order: CIDR address"
      operationId: CockroachCloud_ListAllowlistEntries
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: pagination.page
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: pagination.limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: pagination.as_of_time
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |2-
           - ASC: Sort in ascending order. This is the default unless otherwise specified.
           - DESC: Sort in descending order.
        explode: true
        in: query
        name: pagination.sort_order
        required: false
        schema:
          enum:
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAllowlistEntriesResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Get the IP allowlist and propagation status for a cluster
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/networking/allowlist?pagination.page=SOME_STRING_VALUE&pagination.limit=SOME_INTEGER_VALUE&pagination.as_of_time=SOME_STRING_VALUE&pagination.sort_order=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
    post:
      operationId: CockroachCloud_AddAllowlistEntry
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllowlistEntry'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllowlistEntry'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Add a new CIDR address to the IP allowlist
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/networking/allowlist \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"cidr_ip":"192.168.1.1","cidr_mask":32,"name":"Example","sql":true,"ui":true}'
  /api/v1/clusters/{cluster_id}/networking/allowlist/{cidr_ip}/{cidr_mask}:
    delete:
      operationId: CockroachCloud_DeleteAllowlistEntry
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: cidr_ip
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: cidr_mask
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllowlistEntry'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Delete an IP allowlist entry
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request DELETE \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/networking/allowlist/{cidr_ip}/{cidr_mask} \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
  /api/v1/clusters/{cluster_id}/networking/allowlist/{entry.cidr_ip}/{entry.cidr_mask}:
    patch:
      operationId: CockroachCloud_UpdateAllowlistEntry
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: entry.cidr_ip
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: entry.cidr_mask
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllowlistEntry_1'
        description: AllowlistEntry
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllowlistEntry'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Update an IP allowlist entry
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request PATCH \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/networking/allowlist/{entry.cidr_ip}/{entry.cidr_mask} \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --data '{"cidr_ip":"192.168.1.1","cidr_mask":32,"name":"Example","sql":true,"ui":true}'
    put:
      operationId: CockroachCloud_AddAllowlistEntry2
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: entry.cidr_ip
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: entry.cidr_mask
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllowlistEntry_1'
        description: AllowlistEntry
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllowlistEntry'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Add a new CIDR address to the IP allowlist
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request PUT \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/networking/allowlist/{entry.cidr_ip}/{entry.cidr_mask} \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --data '{"cidr_ip":"192.168.1.1","cidr_mask":32,"name":"Example","sql":true,"ui":true}'
  /api/v1/clusters/{cluster_id}/networking/aws-endpoint-connections:
    get:
      operationId: CockroachCloud_ListAwsEndpointConnections
      parameters:
      - description: cluster_id is the ID for the cluster.
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AwsEndpointConnections'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Lists all AwsEndpointConnections for a given cluster
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/networking/aws-endpoint-connections \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
  /api/v1/clusters/{cluster_id}/networking/aws-endpoint-connections/{endpoint_id}:
    patch:
      description: |-
        The "status" in the returned proto does not reflect the latest post-update
        status, but rather the status before the state is transitioned.
      operationId: CockroachCloud_SetAwsEndpointConnectionState
      parameters:
      - description: cluster_id is the ID for the cluster.
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: endpoint_id is the ID for the VPC endpoint on the customer's
          side.
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetAwsEndpointConnectionStateRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AwsEndpointConnection'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Sets the AWS Endpoint Connection state based on what is passed in the
        body
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request PATCH \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/networking/aws-endpoint-connections/{endpoint_id} \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"status":"AVAILABLE"}'
  /api/v1/clusters/{cluster_id}/networking/egress-rules:
    get:
      description: "Sort order: Name"
      operationId: CockroachCloud_ListEgressRules
      parameters:
      - description: |-
          cluster_id identifies the CockroachDB cluster owning the set of returned
          egress rules.
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: pagination.page
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: pagination.limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: pagination.as_of_time
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |2-
           - ASC: Sort in ascending order. This is the default unless otherwise specified.
           - DESC: Sort in descending order.
        explode: true
        in: query
        name: pagination.sort_order
        required: false
        schema:
          enum:
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEgressRulesResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: List all egress rules associates with a cluster
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/networking/egress-rules?pagination.page=SOME_STRING_VALUE&pagination.limit=SOME_INTEGER_VALUE&pagination.as_of_time=SOME_STRING_VALUE&pagination.sort_order=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
    post:
      operationId: CockroachCloud_AddEgressRule
      parameters:
      - description: cluster_id identifies the cluster to which this egress rule applies.
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddEgressRuleRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddEgressRuleResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Add an egress rule
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/networking/egress-rules \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"cluster_id":"35c4abb2-bb66-46d7-afed-25ebef5ed100","description":"egress for GCP storage buckets","destination":"storage.googleapis.com","name":"roach-buckets","paths":["/customer-managed-bucket-1/*","/customer-managed-bucket-2/*"],"ports":[443,80],"type":"FQDN"}'
  /api/v1/clusters/{cluster_id}/networking/egress-rules/egress-traffic-policy:
    post:
      operationId: CockroachCloud_SetEgressTrafficPolicy
      parameters:
      - description: cluster_id identifies the cluster whose egress policy will be
          updated.
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetEgressTrafficPolicyRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Outbound traffic management
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/networking/egress-rules/egress-traffic-policy \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"allow_all":true,"idempotency_key":"string"}'
  /api/v1/clusters/{cluster_id}/networking/egress-rules/{rule_id}:
    delete:
      operationId: CockroachCloud_DeleteEgressRule
      parameters:
      - description: cluster_id uniquely identifies the cluster owning the egress
          rule.
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: rule_id is the UUID of an existing egress rule. This field is
          required.
        explode: false
        in: path
        name: rule_id
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          idempotency_key uniquely identifies this request. If not set, it will be
          set by the server.
        explode: true
        in: query
        name: idempotency_key
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteEgressRuleResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Delete an existing egress rule
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request DELETE \
            --url 'https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/networking/egress-rules/{rule_id}?idempotency_key=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
    get:
      operationId: CockroachCloud_GetEgressRule
      parameters:
      - description: cluster_id uniquely identifies the cluster owning the egress
          rule.
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: rule_id is the UUID of an existing egress rule.
        explode: false
        in: path
        name: rule_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEgressRuleResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Get an existing egress rule
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/networking/egress-rules/{rule_id} \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
    patch:
      operationId: CockroachCloud_EditEgressRule
      parameters:
      - description: cluster_id uniquely identifies the cluster owning the egress
          rule.
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: rule_id is the UUID of an existing egress rule. This field is
          required.
        explode: false
        in: path
        name: rule_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditEgressRuleRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditEgressRuleResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Edit an existing egress rule
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request PATCH \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/networking/egress-rules/{rule_id} \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"cluster_id":"35c4abb2-bb66-46d7-afed-25ebef5ed100","ports":[443,80],"rule_id":"35c4abb2-bb66-46d7-afed-25ebef5ed2aa"}'
  /api/v1/clusters/{cluster_id}/networking/private-endpoint-services:
    get:
      description: The internal_dns property from the regions field in the ListClusters
        response can be used to connect to PrivateEndpointServices.
      operationId: CockroachCloud_ListPrivateEndpointServices
      parameters:
      - description: cluster_id is the ID for the cluster.
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateEndpointServices'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Lists all PrivateEndpointServices for a given cluster
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/networking/private-endpoint-services \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
    post:
      operationId: CockroachCloud_CreatePrivateEndpointServices
      parameters:
      - description: cluster_id is the ID for the cluster.
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateEndpointServices'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Creates all PrivateEndpointServices for a given cluster
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/networking/private-endpoint-services \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
  /api/v1/clusters/{cluster_id}/nodes:
    get:
      description: "Sort order: Region name, node name"
      operationId: CockroachCloud_ListClusterNodes
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: Optional filter to limit response to a single region.
        explode: true
        in: query
        name: region_name
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: pagination.page
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: pagination.limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: pagination.as_of_time
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |2-
           - ASC: Sort in ascending order. This is the default unless otherwise specified.
           - DESC: Sort in descending order.
        explode: true
        in: query
        name: pagination.sort_order
        required: false
        schema:
          enum:
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListClusterNodesResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: List nodes for a cluster
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/nodes?region_name=SOME_STRING_VALUE&pagination.page=SOME_STRING_VALUE&pagination.limit=SOME_INTEGER_VALUE&pagination.as_of_time=SOME_STRING_VALUE&pagination.sort_order=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
  /api/v1/clusters/{cluster_id}/sql-users:
    get:
      description: "Sort order: Username"
      operationId: CockroachCloud_ListSQLUsers
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: pagination.page
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: pagination.limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: pagination.as_of_time
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |2-
           - ASC: Sort in ascending order. This is the default unless otherwise specified.
           - DESC: Sort in descending order.
        explode: true
        in: query
        name: pagination.sort_order
        required: false
        schema:
          enum:
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSQLUsersResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: List SQL users for a cluster
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/sql-users?pagination.page=SOME_STRING_VALUE&pagination.limit=SOME_INTEGER_VALUE&pagination.as_of_time=SOME_STRING_VALUE&pagination.sort_order=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
    post:
      operationId: CockroachCloud_CreateSQLUser
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSQLUserRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SQLUser'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Create a new SQL user
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/sql-users \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"name":"example_username","password":"example_password"}'
  /api/v1/clusters/{cluster_id}/sql-users/{name}:
    delete:
      operationId: CockroachCloud_DeleteSQLUser
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SQLUser'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Delete a SQL user
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request DELETE \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/sql-users/{name} \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
  /api/v1/clusters/{cluster_id}/sql-users/{name}/password:
    put:
      operationId: CockroachCloud_UpdateSQLUserPassword
      parameters:
      - explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSQLUserPasswordRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SQLUser'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Update a SQL user's password
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request PUT \
            --url https://cockroachlabs.cloud/api/v1/clusters/{cluster_id}/sql-users/{name}/password \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"password":"example_new_password"}'
  /api/v1/invoices:
    get:
      description: "Sort order: invoice start date ascending"
      operationId: CockroachCloud_ListInvoices
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListInvoicesResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: List invoices for a given organization
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://cockroachlabs.cloud/api/v1/invoices \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
  /api/v1/invoices/{invoice_id}:
    get:
      operationId: CockroachCloud_GetInvoice
      parameters:
      - description: |-
          invoice_id is the unique ID representing the invoice.
          invoice_id is used to retrieve a specific
          billing period's invoice.
        explode: false
        in: path
        name: invoice_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Gets a specific invoice for an organization
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://cockroachlabs.cloud/api/v1/invoices/{invoice_id} \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
  /api/v1/organization:
    get:
      operationId: CockroachCloud_GetOrganizationInfo
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Get information about the caller's organization
      tags:
      - CockroachCloud
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://cockroachlabs.cloud/api/v1/organization \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
  /api/v1/roles:
    get:
      operationId: CockroachCloud_ListRoleGrants
      parameters:
      - explode: true
        in: query
        name: pagination.page
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: pagination.limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: pagination.as_of_time
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |2-
           - ASC: Sort in ascending order. This is the default unless otherwise specified.
           - DESC: Sort in descending order.
        explode: true
        in: query
        name: pagination.sort_order
        required: false
        schema:
          enum:
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRoleGrantsResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Lists all RoleGrants
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://cockroachlabs.cloud/api/v1/roles?pagination.page=SOME_STRING_VALUE&pagination.limit=SOME_INTEGER_VALUE&pagination.as_of_time=SOME_STRING_VALUE&pagination.sort_order=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
  /api/v1/roles/{user_id}:
    get:
      operationId: CockroachCloud_GetAllRolesForUser
      parameters:
      - explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllRolesForUserResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Gets All Role Grants for the specified user
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://cockroachlabs.cloud/api/v1/roles/{user_id} \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
    put:
      operationId: CockroachCloud_SetRolesForUser
      parameters:
      - explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CockroachCloud_SetRolesForUser_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllRolesForUserResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Makes the users roles exactly those provided
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request PUT \
            --url https://cockroachlabs.cloud/api/v1/roles/{user_id} \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '[{"name":"CLUSTER_ADMIN","resource":{"id":"example_cluster_id","type":"CLUSTER"}}]'
  /api/v1/roles/{user_id}/{resource_type}/{resource_id}/{role_name}:
    delete:
      operationId: CockroachCloud_RemoveUserFromRole
      parameters:
      - explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: resource_type
        required: true
        schema:
          enum:
          - ORGANIZATION
          - CLUSTER
          type: string
        style: simple
      - explode: false
        in: path
        name: resource_id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: role_name
        required: true
        schema:
          enum:
          - DEVELOPER
          - ADMIN
          - BILLING_COORDINATOR
          - ORG_ADMIN
          - ORG_MEMBER
          - CLUSTER_ADMIN
          - CLUSTER_OPERATOR_WRITER
          - CLUSTER_OPERATOR_READER
          - CLUSTER_DEVELOPER
          - CLUSTER_CREATOR
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllRolesForUserResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Removes the user from the given role
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request DELETE \
            --url https://cockroachlabs.cloud/api/v1/roles/{user_id}/{resource_type}/{resource_id}/{role_name} \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
    post:
      operationId: CockroachCloud_AddUserToRole
      parameters:
      - explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: resource_type
        required: true
        schema:
          enum:
          - ORGANIZATION
          - CLUSTER
          type: string
        style: simple
      - explode: false
        in: path
        name: resource_id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: role_name
        required: true
        schema:
          enum:
          - DEVELOPER
          - ADMIN
          - BILLING_COORDINATOR
          - ORG_ADMIN
          - ORG_MEMBER
          - CLUSTER_ADMIN
          - CLUSTER_OPERATOR_WRITER
          - CLUSTER_OPERATOR_READER
          - CLUSTER_DEVELOPER
          - CLUSTER_CREATOR
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllRolesForUserResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Adds the user to the given role
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://cockroachlabs.cloud/api/v1/roles/{user_id}/{resource_type}/{resource_id}/{role_name} \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
  /api/v1/users/persons-by-email:
    get:
      operationId: CockroachCloud_GetPersonUsersByEmail
      parameters:
      - description: an email address is required.
        explode: true
        in: query
        name: email
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPersonUsersByEmailResponse'
          description: A successful response.
        "400":
          content:
            application/json:
              schema: {}
          description: Returned when a request field is invalid.
        "401":
          content:
            application/json:
              schema: {}
          description: Returned when the token bearer cannot be authenticated.
        "403":
          content:
            application/json:
              schema: {}
          description: Returned when the user does not have permission to access the
            resource.
        "404":
          content:
            application/json:
              schema: {}
          description: Returned when the resource does not exist.
        "500":
          content:
            application/json:
              schema: {}
          description: Server error
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An unexpected error response.
      summary: Search person users by email address
      tags:
      - CockroachCloud
      x-badges:
      - color: blue
        label: PREVIEW
      x-codeSamples:
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://cockroachlabs.cloud/api/v1/users/persons-by-email?email=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
components:
  requestBodies:
    CockroachCloud_AddAllowlistEntry2Entry:
      content:
        application/json:
          schema:
            example:
              cidr_ip: 192.168.1.1
              cidr_mask: 32
              name: Example
              sql: true
              ui: true
            properties:
              name:
                type: string
              sql:
                type: boolean
              ui:
                type: boolean
            required:
            - sql
            - ui
            title: AllowlistEntry
            type: object
      description: AllowlistEntry
      required: true
    CockroachCloud_EnableCMEKSpecBody:
      content:
        application/json:
          schema:
            example:
              region_specs:
              - key_spec:
                  auth_principal: arn:aws:iam::account:role/role-name-with-path
                  type: AWS_KMS
                  uri: arn:aws:kms:us-west-2:111122223333:key/id-of-kms-key
                region: us-central1
            properties:
              region_specs:
                items:
                  $ref: '#/components/schemas/CMEKRegionSpecification'
                type: array
            required:
            - region_specs
            title: CMEKClusterSpecification
            type: object
      required: true
  schemas:
    AWSEndpointConnectionStatus.Type:
      enum:
      - PENDING
      - PENDING_ACCEPTANCE
      - AVAILABLE
      - DELETING
      - DELETED
      - REJECTED
      - FAILED
      - EXPIRED
      type: string
    AWSPrivateLinkServiceDetail:
      example:
        availability_zone_ids:
        - availability_zone_ids
        - availability_zone_ids
        service_name: service_name
        service_id: service_id
      properties:
        availability_zone_ids:
          description: |-
            availability_zone_ids are the identifiers for the availability zones
            that the service is available in.
          items:
            type: string
          type: array
        service_id:
          description: |-
            service_id is the server side of the PrivateLink
            connection. This is the same as AWSPrivateLinkEndpoint.service_id.
          type: string
        service_name:
          description: |-
            service_name is the AWS service name customers use to create endpoints
            on their end.
          type: string
      required:
      - availability_zone_ids
      - service_id
      - service_name
      type: object
    AddEgressRuleResponse:
      description: AddEgressRuleResponse is the response message of the AddEgressRule
        RPC.
      example:
        Rule:
          crl_managed: true
          cluster_id: cluster_id
          paths:
          - paths
          - paths
          destination: destination
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          description: description
          id: id
          state: state
          ports:
          - 0
          - 0
          type: type
      properties:
        Rule:
          $ref: '#/components/schemas/EgressRule'
      required:
      - rule
      title: AddEgressRuleResponse
      type: object
    AllowlistEntry:
      example:
        cidr_ip: 192.168.1.1
        cidr_mask: 32
        name: Example
        sql: true
        ui: true
      properties:
        cidr_ip:
          type: string
        cidr_mask:
          format: int32
          type: integer
        name:
          type: string
        sql:
          type: boolean
        ui:
          type: boolean
      required:
      - cidr_ip
      - cidr_mask
      - sql
      - ui
      title: AllowlistEntry
      type: object
    Any:
      additionalProperties: {}
      description: |-
        `Any` contains an arbitrary serialized protocol buffer message along with a
        URL that describes the type of the serialized message.

        Protobuf library provides support to pack/unpack Any values in the form
        of utility functions or additional generated methods of the Any type.

        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }

        Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

        Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use
        'type.googleapis.com/full.type.name' as the type URL and the unpack
        methods only use the fully qualified type name after the last '/'
        in the type URL, for example "foo.bar.com/x/y.z" will yield type
        name "y.z".


        JSON

        The JSON representation of an `Any` value uses the regular
        representation of the deserialized, embedded message, with an
        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON
        representation, that representation will be embedded adding a field
        `value` which holds the custom JSON in addition to the `@type`
        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
      example:
        '@type': '@type'
      properties:
        '@type':
          description: |-
            A URL/resource name that uniquely identifies the type of the serialized
            protocol buffer message. This string must contain at least
            one "/" character. The last segment of the URL's path must represent
            the fully qualified name of the type (as in
            `path/google.protobuf.Duration`). The name should be in a canonical form
            (e.g., leading "." is not accepted).

            In practice, teams usually precompile into the binary all types that they
            expect it to use in the context of Any. However, for URLs which use the
            scheme `http`, `https`, or no scheme, one can optionally set up a type
            server that maps type URLs to message definitions as follows:

            * If no scheme is provided, `https` is assumed.
            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official
            protobuf release, and it is not used for type URLs beginning with
            type.googleapis.com.

            Schemes other than `http`, `https` (or the empty scheme) might be
            used with implementation specific semantics.
          type: string
      type: object
    AuditLogAction:
      enum:
      - AUDIT_LOG_ACTION_CREATE_CLUSTER
      - AUDIT_LOG_ACTION_DELETE_CLUSTER
      - AUDIT_LOG_ACTION_INVITE_USER_TO_ORGANIZATION
      - AUDIT_LOG_ACTION_EDIT_USER_INVITE
      - AUDIT_LOG_ACTION_REVOKE_USER_INVITE
      - AUDIT_LOG_ACTION_ACCEPT_USER_INVITE
      - AUDIT_LOG_ACTION_ASSIGN_USER_ROLE
      - AUDIT_LOG_ACTION_DELETE_USER_FROM_ORGANIZATION
      - AUDIT_LOG_ACTION_CREATE_SERVICE_ACCOUNT
      - AUDIT_LOG_ACTION_UPDATE_SERVICE_ACCOUNT
      - AUDIT_LOG_ACTION_DELETE_SERVICE_ACCOUNT
      - AUDIT_LOG_ACTION_CREATE_API_KEY
      - AUDIT_LOG_ACTION_UPDATE_API_KEY
      - AUDIT_LOG_ACTION_DELETE_API_KEY
      - AUDIT_LOG_ACTION_UPDATE_CLUSTER
      - AUDIT_LOG_ACTION_CREATE_SQL_USER
      - AUDIT_LOG_ACTION_CHANGE_SQL_USER_PASSWORD
      - AUDIT_LOG_ACTION_DELETE_SQL_USER
      - AUDIT_LOG_ACTION_ADD_IP_ALLOWLIST
      - AUDIT_LOG_ACTION_EDIT_IP_ALLOWLIST
      - AUDIT_LOG_ACTION_DELETE_IP_ALLOWLIST
      - AUDIT_LOG_ACTION_CREATE_VPC_PEERING
      - AUDIT_LOG_ACTION_DELETE_VPC_PEERING
      - AUDIT_LOG_ACTION_CREATE_PRIVATE_LINK
      - AUDIT_LOG_ACTION_ACCEPT_PRIVATE_LINK
      - AUDIT_LOG_ACTION_REJECT_PRIVATE_LINK
      - AUDIT_LOG_ACTION_USER_LOGIN
      - AUDIT_LOG_ACTION_ADD_USER_TO_ROLE
      - AUDIT_LOG_ACTION_REMOVE_USER_FROM_ROLE
      - AUDIT_LOG_ACTION_CREATE_USER
      - AUDIT_LOG_ACTION_DELETE_USER
      - AUDIT_LOG_ACTION_UPDATE_USER
      - AUDIT_LOG_ACTION_CREATE_GROUP
      - AUDIT_LOG_ACTION_DELETE_GROUP
      - AUDIT_LOG_ACTION_UPDATE_GROUP
      type: string
    AuditLogEntry:
      description: |-
        AuditLogEntry represents an entry in the cloud event log.
        Note that this message definition should always match exactly with the
        corresponding `AuditLogEntry` message in `console/consolepb/console.proto`.
      example:
        service_account_name: service_account_name
        cluster_name: cluster_name
        metadata:
          ip_address: ip_address
        trace_id: trace_id
        user_email: user_email
        created_at: 2000-01-23T04:56:07.000+00:00
        session_id: session_id
        source: null
        error: error
        cluster_id: cluster_id
        payload: "{}"
        action: null
        id: id
      properties:
        action:
          $ref: '#/components/schemas/AuditLogAction'
        cluster_id:
          description: |-
            ClusterId is the ID of the cluster to which this log entry applies, if it
            applies to a single cluster.
          type: string
        cluster_name:
          description: |-
            ClusterName is the name of the cluster to which this log entry applies, if
            it applies to a single cluster.
          type: string
        created_at:
          description: CreatedAt is the time that this log entry was recorded.
          format: date-time
          type: string
        error:
          description: Error is the error that applies to this entry if it represents
            a failure.
          type: string
        id:
          description: Id uniquely identifies this entry.
          type: string
        metadata:
          $ref: '#/components/schemas/AuditLogMetadata'
        payload:
          description: |-
            Payload is a representation of the essential details relating to this
            log entry.
          type: object
        service_account_name:
          description: |-
            ServiceAccountName is the name of the service account that triggered this
            log entry. If it was not a service account, it will be empty.
          type: string
        session_id:
          description: |-
            SessionId is an ID that can be used to correlate this log entry with
            others that are emitted as part of the same user session, typically for
            users interacting through the UI. It should be treated as an opaque string
            with no guaranteed structure.
          type: string
        source:
          $ref: '#/components/schemas/AuditLogSource'
        trace_id:
          description: |-
            TraceId is an ID that can be used to correlate this log entry with others
            that are emitted as part of the same process. It should be treated as an
            opaque string with no guaranteed structure.
          type: string
        user_email:
          description: |-
            UserEmail is the email address of the user that triggered this log entry.
            If it was not a human user, it will be empty.
          type: string
      type: object
    AuditLogMetadata:
      example:
        ip_address: ip_address
      properties:
        ip_address:
          type: string
      type: object
    AuditLogSource:
      enum:
      - AUDIT_LOG_SOURCE_CC_API
      - AUDIT_LOG_SOURCE_CLI
      - AUDIT_LOG_SOURCE_UI
      - AUDIT_LOG_SOURCE_INTERNAL
      type: string
    AwsEndpointConnection:
      example:
        service_id: service_id
        endpoint_id: endpoint_id
        cloud_provider: null
        region_name: region_name
        status: null
      properties:
        cloud_provider:
          $ref: '#/components/schemas/CloudProvider.Type'
        endpoint_id:
          description: endpoint_id is the client side of the PrivateLink connection.
          type: string
        region_name:
          description: region_name is the cloud provider region name (i.e. us-east-1).
          type: string
        service_id:
          description: |-
            service_id is the server side of the PrivateLink
            connection. This is the same as AWSPrivateLinkEndpoint.service_id.
          type: string
        status:
          $ref: '#/components/schemas/AWSEndpointConnectionStatus.Type'
      required:
      - cloud_provider
      - endpoint_id
      - region_name
      - service_id
      - status
      type: object
    AwsEndpointConnections:
      example:
        connections:
        - service_id: service_id
          endpoint_id: endpoint_id
          cloud_provider: null
          region_name: region_name
          status: null
        - service_id: service_id
          endpoint_id: endpoint_id
          cloud_provider: null
          region_name: region_name
          status: null
      properties:
        connections:
          description: Connections is a list of private endpoints.
          items:
            $ref: '#/components/schemas/AwsEndpointConnection'
          type: array
      required:
      - connections
      type: object
    BuiltInFromGroups:
      example:
        role:
          resource:
            id: id
            type: null
          name: null
        group_names:
        - group_names
        - group_names
      properties:
        group_names:
          items:
            type: string
          type: array
        role:
          $ref: '#/components/schemas/BuiltInRole'
      type: object
    BuiltInRole:
      example:
        resource:
          id: id
          type: null
        name: null
      properties:
        name:
          $ref: '#/components/schemas/OrganizationUserRole.Type'
        resource:
          $ref: '#/components/schemas/Resource'
      required:
      - name
      - resource
      type: object
    CMEKClusterInfo:
      description: |-
        CMEKClusterInfo contains the status of CMEK across an entire cluster,
        including within each one its regions.
      example:
        region_infos:
        - region: region
          key_infos:
          - updated_at: 2000-01-23T04:56:07.000+00:00
            created_at: 2000-01-23T04:56:07.000+00:00
            user_message: user_message
            spec:
              auth_principal: auth_principal
              type: null
              uri: uri
            status: null
          - updated_at: 2000-01-23T04:56:07.000+00:00
            created_at: 2000-01-23T04:56:07.000+00:00
            user_message: user_message
            spec:
              auth_principal: auth_principal
              type: null
              uri: uri
            status: null
          status: null
        - region: region
          key_infos:
          - updated_at: 2000-01-23T04:56:07.000+00:00
            created_at: 2000-01-23T04:56:07.000+00:00
            user_message: user_message
            spec:
              auth_principal: auth_principal
              type: null
              uri: uri
            status: null
          - updated_at: 2000-01-23T04:56:07.000+00:00
            created_at: 2000-01-23T04:56:07.000+00:00
            user_message: user_message
            spec:
              auth_principal: auth_principal
              type: null
              uri: uri
            status: null
          status: null
        status: null
      properties:
        region_infos:
          items:
            $ref: '#/components/schemas/CMEKRegionInfo'
          type: array
        status:
          $ref: '#/components/schemas/CMEKStatus'
      type: object
    CMEKCustomerAction:
      description: |-
        CMEKCustomerAction enumerates the actions a customer can take on a cluster
        that has been enabled for CMEK.
      enum:
      - REVOKE
      type: string
    CMEKKeyInfo:
      description: |-
        CMEKKeyInfo contains the status of a customer-provided key alongside the
        specification.
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        created_at: 2000-01-23T04:56:07.000+00:00
        user_message: user_message
        spec:
          auth_principal: auth_principal
          type: null
          uri: uri
        status: null
      properties:
        created_at:
          format: date-time
          type: string
        spec:
          $ref: '#/components/schemas/CMEKKeySpecification'
        status:
          $ref: '#/components/schemas/CMEKStatus'
        updated_at:
          format: date-time
          type: string
        user_message:
          type: string
      type: object
    CMEKKeySpecification:
      description: "CMEKKeySpecification contains all the details necessary to use\
        \ a customer-provided\nencryption key.\n\nThis involves the type/location\
        \ of the key and the principal to authenticate as \nwhen accessing it."
      example:
        auth_principal: auth_principal
        type: null
        uri: uri
      properties:
        auth_principal:
          type: string
        type:
          $ref: '#/components/schemas/CMEKKeyType'
        uri:
          type: string
      type: object
    CMEKKeyType:
      enum:
      - AWS_KMS
      - GCP_CLOUD_KMS
      - NULL_KMS
      title: CMEKKeyType enumerates types of customer-managed keys
      type: string
    CMEKRegionInfo:
      description: "CMEKRegionInfo contains the status of CMEK within a region.\n\n\
        This includes current and past key specifications used within the region,\
        \ \nas well as the status of those specifications"
      example:
        region: region
        key_infos:
        - updated_at: 2000-01-23T04:56:07.000+00:00
          created_at: 2000-01-23T04:56:07.000+00:00
          user_message: user_message
          spec:
            auth_principal: auth_principal
            type: null
            uri: uri
          status: null
        - updated_at: 2000-01-23T04:56:07.000+00:00
          created_at: 2000-01-23T04:56:07.000+00:00
          user_message: user_message
          spec:
            auth_principal: auth_principal
            type: null
            uri: uri
          status: null
        status: null
      properties:
        key_infos:
          items:
            $ref: '#/components/schemas/CMEKKeyInfo'
          type: array
        region:
          type: string
        status:
          $ref: '#/components/schemas/CMEKStatus'
      type: object
    CMEKRegionSpecification:
      description: |-
        CMEKRegionSpecification declares the customer-provided key specification that
        should be used in a given region.
      properties:
        key_spec:
          $ref: '#/components/schemas/CMEKKeySpecification'
        region:
          type: string
      type: object
    CMEKStatus:
      description: |-
        CMEKStatus describes the current status of CMEK for an entire CRDB cluster
        or a CMEK key within a region.

         - DISABLED: DISABLED corresponds to the state of a cluster or region-level key when
        CMEK has finished being disabled. By default, CMEK will be disabled for
        new clusters.
         - DISABLING: DISABLING corresponds to the state of a cluster or region-level key when
        CMEK is in the process of being disabled.
         - DISABLE_FAILED: DISABLE_FAILED corresponds to the state of a cluster or region-level key
        when CMEK has failed to be disabled.
         - ENABLED: ENABLED corresponds to the state of a cluster or region-level key when
        CMEK is enabled.
         - ENABLING: ENABLING corresponds to the state of a cluster or region-level key when
        CMEK is in the process of being enabled.
         - ENABLE_FAILED: ENABLE_FAILED corresponds to the state of a cluster or region-level key
        when CMEK has failed to be enabled.
         - ROTATING: ROTATING corresponds to the state of a cluster or region when the a new
        spec is in the process of being enabled while an existing spec is being
        disabled.
         - ROTATE_FAILED: ROTATE_FAILED corresponds to the state of a cluster or region if there was
        a failure to update from one CMEK spec to another.
         - REVOKED: REVOKED corresponds to the state of a cluster or region-level key when the
        customer has revoked CockroachLab's permissions for their key.
         - REVOKING: REVOKING corresponds to the state of a cluster or region-level key when
        CMEK is in the process of being revoked.
         - REVOKE_FAILED: REVOKE_FAILED corresponds to the state of a cluster or region-level key
        when CMEK has failed to be revoked.
      enum:
      - DISABLED
      - DISABLING
      - DISABLE_FAILED
      - ENABLED
      - ENABLING
      - ENABLE_FAILED
      - ROTATING
      - ROTATE_FAILED
      - REVOKED
      - REVOKING
      - REVOKE_FAILED
      type: string
    ClientCACertInfo:
      example:
        x509_pem_cert: x509_pem_cert
        status: null
      properties:
        status:
          $ref: '#/components/schemas/ClientCACertStatus'
        x509_pem_cert:
          type: string
      type: object
    ClientCACertStatus:
      description: |2-
         - NOT_SET: NOT_SET indicates a client CA cert is not set on the cluster.
        New clusters won't have a client CA cert set.
         - IS_SET: IS_SET indicates a client CA cert is set on the cluster.
         - PENDING: PENDING indicates a client CA cert update is in flight on the cluster.
         - FAILED: FAILED indicates a client CA cert update was attempted, but failed.
      enum:
      - NOT_SET
      - IS_SET
      - PENDING
      - FAILED
      type: string
    CloudProvider.Type:
      description: |2-
         - GCP: The Google Cloud Platform cloud provider.
         - AWS: The Amazon Web Services cloud provider.
         - AZURE: Limited Access: The Azure cloud provider.
      enum:
      - GCP
      - AWS
      - AZURE
      type: string
    CloudProviderRegion:
      example:
        distance: 0.8008282
        provider: null
        name: name
        serverless: true
        location: location
      properties:
        distance:
          description: "Distance in miles, based on client IP address."
          format: float
          type: number
        location:
          type: string
        name:
          type: string
        provider:
          $ref: '#/components/schemas/CloudProvider.Type'
        serverless:
          type: boolean
      required:
      - distance
      - location
      - name
      - provider
      - serverless
      type: object
    CloudWatchMetricExportInfo:
      example:
        target_region: target_region
        log_group_name: log_group_name
        cluster_id: cluster_id
        role_arn: role_arn
        user_message: user_message
        status: null
      properties:
        cluster_id:
          type: string
        log_group_name:
          description: log_group_name is the customized log group name.
          type: string
        role_arn:
          description: |-
            role_arn is the IAM role used to upload metric segments to the
            target AWS account.
          type: string
        status:
          $ref: '#/components/schemas/MetricExportStatus.Type'
        target_region:
          description: |-
            target_region specifies the specific AWS region that the metrics will
            be exported to.
          type: string
        user_message:
          type: string
      required:
      - cluster_id
      - role_arn
      title: CloudWatchMetricExportInfo
      type: object
    Cluster:
      example:
        account_id: ""
        cloud_provider: GCP
        cockroach_version: v21.2.4
        config:
          serverless:
            routing_id: example-cluster-1533
            spend_limit: 0
        created_at: 2022-03-22T20:23:11.285067Z
        creator_id: 7cde0cd9-0d8a-4008-8f90-45092ce8afc1
        deleted_at: null
        id: 35c4abb2-bb66-46d7-afed-25ebef5ed2aa
        name: example-cluster
        operation_status: CLUSTER_STATUS_UNSPECIFIED
        plan: SERVERLESS
        regions:
        - name: us-central1
          node_count: 0
          sql_dns: free-tier7.gcp-us-central1.crdb.io
          ui_dns: ""
        state: CREATED
        updated_at: 2022-03-22T20:23:11.879593Z
        upgrade_status: USING_LATEST
      properties:
        account_id:
          type: string
        cloud_provider:
          $ref: '#/components/schemas/CloudProvider.Type'
        cockroach_version:
          type: string
        config:
          $ref: '#/components/schemas/ClusterConfig'
        created_at:
          format: date-time
          type: string
        creator_id:
          type: string
        deleted_at:
          format: date-time
          type: string
        egress_traffic_policy:
          $ref: '#/components/schemas/EgressTrafficPolicy.Type'
        id:
          type: string
        name:
          type: string
        network_visibility:
          $ref: '#/components/schemas/NetworkVisibility.Type'
        operation_status:
          $ref: '#/components/schemas/ClusterStatus.Type'
        plan:
          $ref: '#/components/schemas/Plan.Type'
        regions:
          items:
            $ref: '#/components/schemas/Region'
          type: array
        sql_dns:
          description: sql_dns is the DNS name of SQL interface of the cluster.
          type: string
        state:
          $ref: '#/components/schemas/ClusterState.Type'
        updated_at:
          format: date-time
          type: string
        upgrade_status:
          $ref: '#/components/schemas/ClusterUpgradeStatus.Type'
      required:
      - cloud_provider
      - cockroach_version
      - config
      - creator_id
      - id
      - name
      - operation_status
      - plan
      - regions
      - state
      - upgrade_status
      type: object
    ClusterConfig:
      properties:
        dedicated:
          $ref: '#/components/schemas/DedicatedHardwareConfig'
        serverless:
          $ref: '#/components/schemas/ServerlessClusterConfig'
      type: object
    ClusterMajorVersion:
      description: "For more information about CockroachDB cluster version support,\
        \ see https://www.cockroachlabs.com/docs/releases/release-support-policy.html"
      example:
        support_status: null
        version: version
      properties:
        support_status:
          $ref: '#/components/schemas/ClusterMajorVersionSupportStatus.Type'
        version:
          type: string
      required:
      - support_status
      - version
      type: object
    ClusterMajorVersionSupportStatus.Type:
      enum:
      - UNSUPPORTED
      - SUPPORTED
      - PREVIEW
      type: string
    ClusterState.Type:
      description: |2-
         - LOCKED: An exclusive operation is being performed on this cluster.
        Other operations should not proceed if they did not set a cluster into the LOCKED state.
      enum:
      - CREATING
      - CREATED
      - CREATION_FAILED
      - DELETED
      - LOCKED
      type: string
    ClusterStatus.Type:
      enum:
      - UNSPECIFIED
      - CRDB_MAJOR_UPGRADE_RUNNING
      - CRDB_MAJOR_UPGRADE_FAILED
      - CRDB_MAJOR_ROLLBACK_RUNNING
      - CRDB_MAJOR_ROLLBACK_FAILED
      - CRDB_PATCH_RUNNING
      - CRDB_PATCH_FAILED
      - CRDB_SCALE_RUNNING
      - CRDB_SCALE_FAILED
      - MAINTENANCE_RUNNING
      - CRDB_INSTANCE_UPDATE_RUNNING
      - CRDB_INSTANCE_UPDATE_FAILED
      - CRDB_EDIT_CLUSTER_RUNNING
      - CRDB_EDIT_CLUSTER_FAILED
      - CRDB_CMEK_OPERATION_RUNNING
      - CRDB_CMEK_OPERATION_FAILED
      - TENANT_RESTORE_RUNNING
      - TENANT_RESTORE_FAILED
      - CRDB_LOG_EXPORT_OPERATION_RUNNING
      - CRDB_LOG_EXPORT_OPERATION_FAILED
      - CRDB_CLUSTER_DISRUPTION_RUNNING
      - CRDB_CLUSTER_DISRUPTION_FAILED
      - CRDB_REPAVE_RUNNING
      - CRDB_REPAVE_FAILED
      - CRDB_CUSTOM_CLIENT_CA_RUNNING
      - CRDB_CUSTOM_CLIENT_CA_FAILED
      type: string
    ClusterUpgradeStatus.Type:
      description: |2-
         - FINALIZED: The cluster is running the latest available CockroachDB version, and all upgrades have been finalized.
         - MAJOR_UPGRADE_RUNNING: An major version upgrade is currently in progress.
         - UPGRADE_AVAILABLE: An upgrade is available. If preview builds are enabled for the parent organization, this could indicate that a preview upgrade is available.
         - PENDING_FINALIZATION: An upgrade is complete, but pending finalization. Upgrades are automatically finalized after 72 hours. For more information, see https://www.cockroachlabs.com/docs/stable/upgrade-cockroach-version.html
         - ROLLBACK_RUNNING: A rollback operation is currently in progress.
      enum:
      - FINALIZED
      - MAJOR_UPGRADE_RUNNING
      - UPGRADE_AVAILABLE
      - PENDING_FINALIZATION
      - ROLLBACK_RUNNING
      type: string
    CreateClusterRequest:
      example:
        name: test-cluster
        provider: GCP
        spec:
          serverless:
            regions:
            - us-central1
            spend_limit: 0
      properties:
        name:
          description: |-
            Name must be 6-20 characters in length and can include numbers,
            lowercase letters, and dashes (but no leading or trailing dashes).
          type: string
        provider:
          $ref: '#/components/schemas/CloudProvider.Type'
        spec:
          $ref: '#/components/schemas/CreateClusterSpecification'
      required:
      - name
      - provider
      - spec
      title: CreateClusterRequest
      type: object
    CreateClusterSpecification:
      properties:
        dedicated:
          $ref: '#/components/schemas/DedicatedClusterCreateSpecification'
        serverless:
          $ref: '#/components/schemas/ServerlessClusterCreateSpecification'
      type: object
    CreateGroupRequest:
      example:
        displayName: Test SCIM
        members: []
        schemas:
        - "0": u
          "1": r
          "2": "n"
          "3": ':'
          "4": i
          "5": e
          "6": t
          "7": f
          "8": ':'
          "9": p
          "10": a
          "11": r
          "12": a
          "13": m
          "14": s
          "15": ':'
          "16": s
          "17": c
          "18": i
          "19": m
          "20": ':'
          "21": s
          "22": c
          "23": h
          "24": e
          "25": m
          "26": a
          "27": s
          "28": ':'
          "29": c
          "30": o
          "31": r
          "32": e
          "33": ':'
          "34": "2"
          "35": "."
          "36": "0"
          "37": ':'
          "38": G
          "39": r
          "40": o
          "41": u
          "42": p
      properties:
        displayName:
          type: string
        externalId:
          type: string
        members:
          items:
            $ref: '#/components/schemas/ScimResource'
          type: array
        schemas:
          items:
            type: string
          type: array
      required:
      - displayName
      title: CreateGroupRequest
      type: object
    CreateUserRequest:
      example:
        active: true
        displayName: Carl Roach
        emails:
        - primary: true
          type: work
          value: croach@example.com
        externalId: 11ujl29u0le5T6Aj10h9
        name:
          familyName: Roach
          givenName: Carl
        schemas:
        - "0": u
          "1": r
          "2": "n"
          "3": ':'
          "4": i
          "5": e
          "6": t
          "7": f
          "8": ':'
          "9": p
          "10": a
          "11": r
          "12": a
          "13": m
          "14": s
          "15": ':'
          "16": s
          "17": c
          "18": i
          "19": m
          "20": ':'
          "21": s
          "22": c
          "23": h
          "24": e
          "25": m
          "26": a
          "27": s
          "28": ':'
          "29": c
          "30": o
          "31": r
          "32": e
          "33": ':'
          "34": "2"
          "35": "."
          "36": "0"
          "37": ':'
          "38": U
          "39": s
          "40": e
          "41": r
        userName: croach@example.com
      properties:
        active:
          type: boolean
        displayName:
          type: string
        emails:
          items:
            $ref: '#/components/schemas/ScimEmail'
          type: array
        externalId:
          type: string
        name:
          $ref: '#/components/schemas/ScimName'
        schemas:
          items:
            type: string
          type: array
        userName:
          type: string
      required:
      - active
      - displayName
      - emails
      - name
      title: CreateUserRequest
      type: object
    Currency.Type:
      enum:
      - USD
      - CRDB_CLOUD_CREDITS
      type: string
    CurrencyAmount:
      example:
        amount: 0.8008281904610115
        currency: null
      properties:
        amount:
          description: |-
            amount is the quantity of currency. Internally, currency amounts are tracked
            and stored using an arbitrary-precision decimal representation, but are serialized
            as 64-bit floating point numbers. There may be minor rounding discrepancies
            when parsed as a 32-bit float.
          format: double
          type: number
        currency:
          $ref: '#/components/schemas/Currency.Type'
      type: object
    DatadogMetricExportInfo:
      example:
        cluster_id: cluster_id
        site: null
        api_key: api_key
        user_message: user_message
        status: null
      properties:
        api_key:
          description: api_key is the last 4 digits of a Datadog API key.
          type: string
        cluster_id:
          type: string
        site:
          $ref: '#/components/schemas/DatadogSite.Type'
        status:
          $ref: '#/components/schemas/MetricExportStatus.Type'
        user_message:
          type: string
      required:
      - cluster_id
      - site
      title: DatadogMetricExportInfo
      type: object
    DatadogSite.Type:
      enum:
      - US1
      - US3
      - US5
      - US1_GOV
      - EU1
      type: string
    DedicatedClusterCreateSpecification:
      properties:
        cockroach_version:
          description: |-
            The CockroachDB version for the cluster. The current version
            is used if omitted.
          type: string
        hardware:
          $ref: '#/components/schemas/DedicatedHardwareCreateSpecification'
        network_visibility:
          $ref: '#/components/schemas/NetworkVisibility.Type'
        region_nodes:
          additionalProperties:
            format: int32
            type: integer
          description: |-
            Region keys should match the cloud provider's zone code.
            For example, for Oregon, set region_name to "us-west2" for
            GCP and "us-west-2" for AWS. Values represent the node count.
          type: object
        restrict_egress_traffic:
          description: |-
            Preview: RestrictEgressTraffic if set, results in an egress traffic policy of
            default-deny at creation time.
          type: boolean
      required:
      - hardware
      - region_nodes
      type: object
    DedicatedClusterUpdateSpecification:
      properties:
        cmek_region_specs:
          description: |-
            This field should contain the CMEK specs for newly added regions. If a
            CMEK spec is provided for an existing region, the request is invalid and
            will fail.
          items:
            $ref: '#/components/schemas/CMEKRegionSpecification'
          type: array
        hardware:
          $ref: '#/components/schemas/DedicatedHardwareUpdateSpecification'
        region_nodes:
          additionalProperties:
            format: int32
            type: integer
          description: |-
            Region keys should match the cloud provider's zone code.
            For example, for Oregon, set region_name to "us-west2" for
            GCP and "us-west-2" for AWS. Values represent the node count.
          type: object
      type: object
    DedicatedHardwareConfig:
      properties:
        disk_iops:
          description: |-
            disk_iops is the number of disk I/O operations per second that are
            permitted on each node in the cluster. Zero indicates the cloud
            provider-specific default.
          format: int32
          type: integer
        machine_type:
          description: |-
            machine_type is the machine type identifier within the given cloud
            provider, ex. m5.xlarge, n2-standard-4.
          type: string
        memory_gib:
          description: memory_gib is the memory GiB per node in the cluster.
          format: float
          type: number
        num_virtual_cpus:
          description: num_virtual_cpus is the number of virtual CPUs per node in
            the cluster.
          format: int32
          type: integer
        storage_gib:
          description: storage_gib is the number of storage GiB per node in the cluster.
          format: int32
          type: integer
      required:
      - disk_iops
      - machine_type
      - memory_gib
      - num_virtual_cpus
      - storage_gib
      type: object
    DedicatedHardwareCreateSpecification:
      properties:
        disk_iops:
          description: |-
            disk_iops is the number of disk I/O operations per second that are
            permitted on each node in the cluster. Zero indicates the cloud
            provider-specific default. Only available for AWS clusters.
          format: int32
          type: integer
        machine_spec:
          $ref: '#/components/schemas/DedicatedMachineTypeSpecification'
        storage_gib:
          description: |-
            storage_gib is the number of storage GiB per node in the cluster.
            Zero indicates default to the lowest storage GiB available given machine specs.
          format: int32
          type: integer
      required:
      - machine_spec
      - storage_gib
      type: object
    DedicatedHardwareUpdateSpecification:
      properties:
        disk_iops:
          description: |-
            disk_iops is the number of disk I/O operations per second that are
            permitted on each node in the cluster. Zero indicates the cloud
            provider-specific default. Only available for AWS clusters.
          format: int32
          type: integer
        machine_spec:
          $ref: '#/components/schemas/DedicatedMachineTypeSpecification'
        storage_gib:
          description: storage_gib is the number of storage GiB per node in the cluster.
          format: int32
          type: integer
      type: object
    DedicatedMachineTypeSpecification:
      properties:
        machine_type:
          description: |-
            machine_type is the machine type identifier within the given cloud
            provider, ex. m5.xlarge, n2-standard-4.
          type: string
        num_virtual_cpus:
          description: |-
            num_virtual_cpus may be used to automatically select a machine type
            according to the desired number of vCPUs.
          format: int32
          type: integer
      type: object
    DeleteEgressRuleResponse:
      description: DeleteEgressRuleResponse is the output for the DeleteEgressRule
        RPC.
      example:
        Rule:
          crl_managed: true
          cluster_id: cluster_id
          paths:
          - paths
          - paths
          destination: destination
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          description: description
          id: id
          state: state
          ports:
          - 0
          - 0
          type: type
      properties:
        Rule:
          $ref: '#/components/schemas/EgressRule'
      required:
      - rule
      title: DeleteEgressRuleResponse
      type: object
    DeleteMetricExportResponse:
      example:
        cluster_id: cluster_id
        status: null
      properties:
        cluster_id:
          type: string
        status:
          $ref: '#/components/schemas/MetricExportStatus.Type'
      required:
      - cluster_id
      title: DeleteMetricExportResponse
      type: object
    EditEgressRuleResponse:
      description: EditEgressRuleResponse is the output message to the EditEgressRule
        RPC.
      example:
        Rule:
          crl_managed: true
          cluster_id: cluster_id
          paths:
          - paths
          - paths
          destination: destination
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          description: description
          id: id
          state: state
          ports:
          - 0
          - 0
          type: type
      properties:
        Rule:
          $ref: '#/components/schemas/EgressRule'
      required:
      - rule
      title: EditEgressRuleResponse
      type: object
    EgressRule:
      description: EgressRule represents a network egress rule.
      example:
        crl_managed: true
        cluster_id: cluster_id
        paths:
        - paths
        - paths
        destination: destination
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        description: description
        id: id
        state: state
        ports:
        - 0
        - 0
        type: type
      properties:
        cluster_id:
          description: cluster_id identifies the cluster to which this egress rule
            applies.
          type: string
        created_at:
          description: |-
            created_at is the time at which the time at which the egress rule was
            created.
          format: date-time
          type: string
        crl_managed:
          description: |-
            crl_managed indicates this egress rule is managed by CockroachDB Cloud
            services. This field is set by the server.
          type: boolean
        description:
          description: description is a longer that serves to document the rules purpose.
          type: string
        destination:
          description: |-
            destination is the endpoint (or subnetwork if CIDR) to which traffic is
            allowed.
          type: string
        id:
          description: id uniquely identifies this egress rule.
          type: string
        name:
          description: name is the name of the egress rule.
          type: string
        paths:
          description: paths are the allowed URL paths. Only valid if Type="FQDN".
          items:
            type: string
          type: array
        ports:
          description: |-
            ports are the allowed ports for TCP protocol. If Empty, all ports are
            allowed.
          items:
            format: int32
            type: integer
          type: array
        state:
          description: state indicates the state of the egress rule.
          type: string
        type:
          description: |-
            type classifies the destination field. Valid types include: "FQDN",
            "CIDR".
          type: string
      required:
      - cluster_id
      - crl_managed
      - description
      - destination
      - id
      - name
      - state
      - type
      title: EgressRule
      type: object
    EgressTrafficPolicy.Type:
      description: |2-
         - UNSPECIFIED: UNSPECIFIED signifies the egress traffic policy is unspecified.
         - ERROR: ERROR signifies there has been an internal server error during
        an update to the egress traffic policy.
         - ALLOW_ALL: ALLOW_ALL signifies all outbound connections from CockroachDB are allowed.
         - DEFAULT_DENY: DEFAULT_DENY signifies that CockroachDB can only initiate network
        connections to destinations explicitly allowed by the user or CockroachDB
        Cloud operators.
         - UPDATING: UPDATING signifies the egress traffic policy is updating.
      enum:
      - UNSPECIFIED
      - ERROR
      - ALLOW_ALL
      - DEFAULT_DENY
      - UPDATING
      type: string
    GetAllRolesForUserResponse:
      example:
        group_roles:
        - role:
            resource:
              id: id
              type: null
            name: null
          group_names:
          - group_names
          - group_names
        - role:
            resource:
              id: id
              type: null
            name: null
          group_names:
          - group_names
          - group_names
        roles:
        - resource:
            id: id
            type: null
          name: null
        - resource:
            id: id
            type: null
          name: null
      properties:
        group_roles:
          items:
            $ref: '#/components/schemas/BuiltInFromGroups'
          type: array
        roles:
          items:
            $ref: '#/components/schemas/BuiltInRole'
          type: array
      title: get_all_roles_for_user_response contains a representation of all roles
        a given user has
      type: object
    GetConnectionStringResponse:
      example:
        params:
          key: params
        connection_string: connection_string
      properties:
        connection_string:
          description: connection_string contains the full connection string with
            parameters formatted inline.
          type: string
        params:
          additionalProperties:
            type: string
          description: params contains a list of individual key parameters for generating
            nonstandard connection strings.
          type: object
      type: object
    GetEgressRuleResponse:
      description: GetEgressRuleResponse is the response message to the GetEgressRule
        RPC.
      example:
        rule:
          crl_managed: true
          cluster_id: cluster_id
          paths:
          - paths
          - paths
          destination: destination
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          description: description
          id: id
          state: state
          ports:
          - 0
          - 0
          type: type
      properties:
        rule:
          $ref: '#/components/schemas/EgressRule'
      required:
      - rule
      title: GetEgressRuleResponse
      type: object
    GetGroupsRequest:
      example:
        attributes: attributes
        excludedAttributes: excludedAttributes
      properties:
        attributes:
          type: string
        excludedAttributes:
          type: string
      title: GetGroupsRequest
      type: object
    GetGroupsResponse:
      example:
        totalResults: 6
        itemsPerPage: 0
        schemas:
        - schemas
        - schemas
        Resources:
        - displayName: displayName
          meta:
            created: created
            location: location
            lastModified: lastModified
            resourceType: resourceType
          members:
          - ref: ref
            display: display
            type: type
            value: value
          - ref: ref
            display: display
            type: type
            value: value
          schemas:
          - schemas
          - schemas
          externalId: externalId
          id: id
        - displayName: displayName
          meta:
            created: created
            location: location
            lastModified: lastModified
            resourceType: resourceType
          members:
          - ref: ref
            display: display
            type: type
            value: value
          - ref: ref
            display: display
            type: type
            value: value
          schemas:
          - schemas
          - schemas
          externalId: externalId
          id: id
      properties:
        Resources:
          items:
            $ref: '#/components/schemas/ScimGroup'
          type: array
        itemsPerPage:
          format: int32
          type: integer
        schemas:
          items:
            type: string
          type: array
        totalResults:
          format: int32
          type: integer
      title: GetGroupsResponse
      type: object
    GetPersonUsersByEmailResponse:
      example:
        user:
          id: id
          email: email
      properties:
        user:
          $ref: '#/components/schemas/PersonUserInfo'
      required:
      - users
      type: object
    GetResourceTypesResponse:
      example:
        startIndex: 6
        totalResults: 1
        itemsPerPage: 0
        schemas:
        - schemas
        - schemas
        Resources:
        - schema: schema
          endpoint: endpoint
          meta:
            created: created
            location: location
            lastModified: lastModified
            resourceType: resourceType
          schemas:
          - schemas
          - schemas
          name: name
          description: description
          id: id
        - schema: schema
          endpoint: endpoint
          meta:
            created: created
            location: location
            lastModified: lastModified
            resourceType: resourceType
          schemas:
          - schemas
          - schemas
          name: name
          description: description
          id: id
      properties:
        Resources:
          items:
            $ref: '#/components/schemas/ScimResourceType'
          type: array
        itemsPerPage:
          format: int32
          type: integer
        schemas:
          items:
            type: string
          type: array
        startIndex:
          format: int32
          type: integer
        totalResults:
          format: int32
          type: integer
      title: GetResourceTypesResponse
      type: object
    GetSchemasResponse:
      example:
        startIndex: 6
        totalResults: 1
        itemsPerPage: 0
        schemas:
        - schemas
        - schemas
        Resources:
        - meta:
            created: created
            location: location
            lastModified: lastModified
            resourceType: resourceType
          name: name
          description: description
          attributes:
          - uniqueness: uniqueness
            name: name
            canonicalValues:
            - canonicalValues
            - canonicalValues
            description: description
            referenceTypes:
            - referenceTypes
            - referenceTypes
            mutability: mutability
            caseExact: true
            multiValued: true
            returned: returned
            type: type
            required: true
            subAttributes:
            - null
            - null
          - uniqueness: uniqueness
            name: name
            canonicalValues:
            - canonicalValues
            - canonicalValues
            description: description
            referenceTypes:
            - referenceTypes
            - referenceTypes
            mutability: mutability
            caseExact: true
            multiValued: true
            returned: returned
            type: type
            required: true
            subAttributes:
            - null
            - null
          id: id
        - meta:
            created: created
            location: location
            lastModified: lastModified
            resourceType: resourceType
          name: name
          description: description
          attributes:
          - uniqueness: uniqueness
            name: name
            canonicalValues:
            - canonicalValues
            - canonicalValues
            description: description
            referenceTypes:
            - referenceTypes
            - referenceTypes
            mutability: mutability
            caseExact: true
            multiValued: true
            returned: returned
            type: type
            required: true
            subAttributes:
            - null
            - null
          - uniqueness: uniqueness
            name: name
            canonicalValues:
            - canonicalValues
            - canonicalValues
            description: description
            referenceTypes:
            - referenceTypes
            - referenceTypes
            mutability: mutability
            caseExact: true
            multiValued: true
            returned: returned
            type: type
            required: true
            subAttributes:
            - null
            - null
          id: id
      properties:
        Resources:
          items:
            $ref: '#/components/schemas/ScimSchema'
          type: array
        itemsPerPage:
          format: int32
          type: integer
        schemas:
          items:
            type: string
          type: array
        startIndex:
          format: int32
          type: integer
        totalResults:
          format: int32
          type: integer
      title: GetSchemasResponse
      type: object
    GetServiceProviderConfigResponse:
      example:
        filter:
          maxResults: 5
          supported: true
        authenticationSchemes:
        - documentationUri: documentationUri
          name: name
          description: description
          specUri: specUri
          type: type
          primary: true
        - documentationUri: documentationUri
          name: name
          description: description
          specUri: specUri
          type: type
          primary: true
        meta:
          created: created
          location: location
          lastModified: lastModified
          resourceType: resourceType
        schemas:
        - schemas
        - schemas
        etag:
          maxResults: 1
          supported: true
        sort:
          supported: true
        bulk:
          maxPayloadSize: 6
          maxOperations: 0
          supported: true
        changePassword:
          supported: true
      properties:
        authenticationSchemes:
          items:
            $ref: '#/components/schemas/ScimAuthenticationScheme'
          type: array
        bulk:
          $ref: '#/components/schemas/ScimBulkSupport'
        changePassword:
          $ref: '#/components/schemas/ScimChangePasswordSupport'
        etag:
          $ref: '#/components/schemas/ScimEtagSupport'
        filter:
          $ref: '#/components/schemas/ScimFilterSupport'
        meta:
          $ref: '#/components/schemas/ScimMetadata'
        schemas:
          items:
            type: string
          type: array
        sort:
          $ref: '#/components/schemas/ScimSortSupport'
      title: GetServiceProviderConfigResponse
      type: object
    GetUsersRequest:
      example:
        filter: filter
        attributes: attributes
        excludedAttributes: excludedAttributes
      properties:
        attributes:
          type: string
        excludedAttributes:
          type: string
        filter:
          type: string
      title: GetUsersRequest
      type: object
    GetUsersResponse:
      example:
        totalResults: 0
        schemas:
        - schemas
        - schemas
        Resources:
        - emails:
          - display: display
            type: type
            value: value
            primary: true
          - display: display
            type: type
            value: value
            primary: true
          displayName: displayName
          meta:
            created: created
            location: location
            lastModified: lastModified
            resourceType: resourceType
          schemas:
          - schemas
          - schemas
          name:
            familyName: familyName
            givenName: givenName
          active: true
          externalId: externalId
          groups:
          - ref: ref
            display: display
            type: type
            value: value
          - ref: ref
            display: display
            type: type
            value: value
          id: id
          userName: userName
        - emails:
          - display: display
            type: type
            value: value
            primary: true
          - display: display
            type: type
            value: value
            primary: true
          displayName: displayName
          meta:
            created: created
            location: location
            lastModified: lastModified
            resourceType: resourceType
          schemas:
          - schemas
          - schemas
          name:
            familyName: familyName
            givenName: givenName
          active: true
          externalId: externalId
          groups:
          - ref: ref
            display: display
            type: type
            value: value
          - ref: ref
            display: display
            type: type
            value: value
          id: id
          userName: userName
      properties:
        Resources:
          items:
            $ref: '#/components/schemas/ScimUser'
          type: array
        schemas:
          items:
            type: string
          type: array
        totalResults:
          format: int32
          type: integer
      title: GetUsersResponse
      type: object
    Invoice:
      description: |-
        Invoice message represents the details and the total charges associated with
        one billing period, which starts at the beginning of the month and ends at
        the beginning of the next month.

        The message also includes details about each invoice item.
      example:
        period_end: 2000-01-23T04:56:07.000+00:00
        balances:
        - amount: 0.8008281904610115
          currency: null
        - amount: 0.8008281904610115
          currency: null
        adjustments:
        - amount:
            amount: 0.8008281904610115
            currency: null
          name: name
        - amount:
            amount: 0.8008281904610115
            currency: null
          name: name
        invoice_items:
        - cluster:
            account_id: ""
            cloud_provider: GCP
            cockroach_version: v21.2.4
            config:
              serverless:
                routing_id: example-cluster-1533
                spend_limit: 0
            created_at: 2022-03-22T20:23:11.285067Z
            creator_id: 7cde0cd9-0d8a-4008-8f90-45092ce8afc1
            deleted_at: null
            id: 35c4abb2-bb66-46d7-afed-25ebef5ed2aa
            name: example-cluster
            operation_status: CLUSTER_STATUS_UNSPECIFIED
            plan: SERVERLESS
            regions:
            - name: us-central1
              node_count: 0
              sql_dns: free-tier7.gcp-us-central1.crdb.io
              ui_dns: ""
            state: CREATED
            updated_at: 2022-03-22T20:23:11.879593Z
            upgrade_status: USING_LATEST
          line_items:
          - quantity_unit: null
            total:
              amount: 0.8008281904610115
              currency: null
            quantity: 6.027456183070403
            description: description
            unit_cost: 1.4658129805029452
          - quantity_unit: null
            total:
              amount: 0.8008281904610115
              currency: null
            quantity: 6.027456183070403
            description: description
            unit_cost: 1.4658129805029452
          totals:
          - amount: 0.8008281904610115
            currency: null
          - amount: 0.8008281904610115
            currency: null
        - cluster:
            account_id: ""
            cloud_provider: GCP
            cockroach_version: v21.2.4
            config:
              serverless:
                routing_id: example-cluster-1533
                spend_limit: 0
            created_at: 2022-03-22T20:23:11.285067Z
            creator_id: 7cde0cd9-0d8a-4008-8f90-45092ce8afc1
            deleted_at: null
            id: 35c4abb2-bb66-46d7-afed-25ebef5ed2aa
            name: example-cluster
            operation_status: CLUSTER_STATUS_UNSPECIFIED
            plan: SERVERLESS
            regions:
            - name: us-central1
              node_count: 0
              sql_dns: free-tier7.gcp-us-central1.crdb.io
              ui_dns: ""
            state: CREATED
            updated_at: 2022-03-22T20:23:11.879593Z
            upgrade_status: USING_LATEST
          line_items:
          - quantity_unit: null
            total:
              amount: 0.8008281904610115
              currency: null
            quantity: 6.027456183070403
            description: description
            unit_cost: 1.4658129805029452
          - quantity_unit: null
            total:
              amount: 0.8008281904610115
              currency: null
            quantity: 6.027456183070403
            description: description
            unit_cost: 1.4658129805029452
          totals:
          - amount: 0.8008281904610115
            currency: null
          - amount: 0.8008281904610115
            currency: null
        period_start: 2000-01-23T04:56:07.000+00:00
        invoice_id: invoice_id
        totals:
        - amount: 0.8008281904610115
          currency: null
        - amount: 0.8008281904610115
          currency: null
      properties:
        adjustments:
          description: |-
            adjustments is a list of credits or costs that adjust the value of the
            invoice (e.g. a Serverless Free Credit or Premium Support adjustment).
            Unlike line items, adjustments are not tied to a particular cluster.
          items:
            $ref: '#/components/schemas/InvoiceAdjustment'
          type: array
        balances:
          description: balances are the amounts of currency left at the time of the
            invoice.
          items:
            $ref: '#/components/schemas/CurrencyAmount'
          type: array
        invoice_id:
          description: invoice_id is the unique ID representing the invoice.
          type: string
        invoice_items:
          description: invoice_items are sorted by the cluster name.
          items:
            $ref: '#/components/schemas/InvoiceItem'
          type: array
        period_end:
          description: period_end is the end of the billing period (exclusive).
          format: date-time
          type: string
        period_start:
          description: period_start is the start of the billing period (inclusive).
          format: date-time
          type: string
        totals:
          description: totals is a list of the total amounts per currency.
          items:
            $ref: '#/components/schemas/CurrencyAmount'
          type: array
      required:
      - balances
      - invoice_id
      - invoice_items
      - period_end
      - period_start
      - totals
      type: object
    InvoiceAdjustment:
      example:
        amount:
          amount: 0.8008281904610115
          currency: null
        name: name
      properties:
        amount:
          $ref: '#/components/schemas/CurrencyAmount'
        name:
          description: name identifies the adjustment.
          type: string
      required:
      - amount
      - name
      type: object
    InvoiceItem:
      example:
        cluster:
          account_id: ""
          cloud_provider: GCP
          cockroach_version: v21.2.4
          config:
            serverless:
              routing_id: example-cluster-1533
              spend_limit: 0
          created_at: 2022-03-22T20:23:11.285067Z
          creator_id: 7cde0cd9-0d8a-4008-8f90-45092ce8afc1
          deleted_at: null
          id: 35c4abb2-bb66-46d7-afed-25ebef5ed2aa
          name: example-cluster
          operation_status: CLUSTER_STATUS_UNSPECIFIED
          plan: SERVERLESS
          regions:
          - name: us-central1
            node_count: 0
            sql_dns: free-tier7.gcp-us-central1.crdb.io
            ui_dns: ""
          state: CREATED
          updated_at: 2022-03-22T20:23:11.879593Z
          upgrade_status: USING_LATEST
        line_items:
        - quantity_unit: null
          total:
            amount: 0.8008281904610115
            currency: null
          quantity: 6.027456183070403
          description: description
          unit_cost: 1.4658129805029452
        - quantity_unit: null
          total:
            amount: 0.8008281904610115
            currency: null
          quantity: 6.027456183070403
          description: description
          unit_cost: 1.4658129805029452
        totals:
        - amount: 0.8008281904610115
          currency: null
        - amount: 0.8008281904610115
          currency: null
      properties:
        cluster:
          $ref: '#/components/schemas/Cluster'
        line_items:
          description: line_items contain all the relevant line items from the Metronome
            invoice.
          items:
            $ref: '#/components/schemas/LineItem'
          type: array
        totals:
          description: totals is a list of the total amounts of line items per currency.
          items:
            $ref: '#/components/schemas/CurrencyAmount'
          type: array
      required:
      - cluster
      - line_items
      - totals
      type: object
    KeysetPaginationRequest:
      properties:
        as_of_time:
          format: date-time
          type: string
        limit:
          format: int32
          type: integer
        page:
          type: string
        sort_order:
          $ref: '#/components/schemas/SortOrder'
      type: object
    KeysetPaginationResponse:
      example:
        next_page: next_page
        previous_page: previous_page
      properties:
        next_page:
          type: string
        previous_page:
          type: string
      type: object
    LineItem:
      example:
        quantity_unit: null
        total:
          amount: 0.8008281904610115
          currency: null
        quantity: 6.027456183070403
        description: description
        unit_cost: 1.4658129805029452
      properties:
        description:
          description: description contains the details of the line item (i.e t3 micro).
          type: string
        quantity:
          description: quantity is the number of the specific line items used.
          format: double
          type: number
        quantity_unit:
          $ref: '#/components/schemas/QuantityUnit.Type'
        total:
          $ref: '#/components/schemas/CurrencyAmount'
        unit_cost:
          description: unit_cost is the cost per unit of line item.
          format: double
          type: number
      required:
      - description
      - quantity
      - quantity_unit
      - total
      - unit_cost
      type: object
    ListAllowlistEntriesResponse:
      example:
        allowlist:
        - cidr_ip: 192.168.1.1
          cidr_mask: 32
          name: Example
          sql: true
          ui: true
        - cidr_ip: 192.168.1.1
          cidr_mask: 32
          name: Example
          sql: true
          ui: true
        pagination:
          next_page: next_page
          previous_page: previous_page
        propagating: true
      properties:
        allowlist:
          items:
            $ref: '#/components/schemas/AllowlistEntry'
          type: array
        pagination:
          $ref: '#/components/schemas/KeysetPaginationResponse'
        propagating:
          type: boolean
      required:
      - allowlist
      - propagating
      title: ListAllowlistEntriesResponse
      type: object
    ListAuditLogsResponse:
      example:
        next_starting_from: 2000-01-23T04:56:07.000+00:00
        entries:
        - service_account_name: service_account_name
          cluster_name: cluster_name
          metadata:
            ip_address: ip_address
          trace_id: trace_id
          user_email: user_email
          created_at: 2000-01-23T04:56:07.000+00:00
          session_id: session_id
          source: null
          error: error
          cluster_id: cluster_id
          payload: "{}"
          action: null
          id: id
        - service_account_name: service_account_name
          cluster_name: cluster_name
          metadata:
            ip_address: ip_address
          trace_id: trace_id
          user_email: user_email
          created_at: 2000-01-23T04:56:07.000+00:00
          session_id: session_id
          source: null
          error: error
          cluster_id: cluster_id
          payload: "{}"
          action: null
          id: id
      properties:
        entries:
          description: |-
            entries is the contiguous list of audit log entries matching the
            pagination request, sorted in the order requested.
          items:
            $ref: '#/components/schemas/AuditLogEntry'
          type: array
        next_starting_from:
          description: |-
            next_starting_from is the timestamp the caller should use to continue
            paginating in the same direction. If the timestamp is unset, it means
            that there are no more entries in the direction of the request, and
            there never will be.
          format: date-time
          type: string
      type: object
    ListAvailableRegionsResponse:
      example:
        pagination:
          next_page: next_page
          previous_page: previous_page
        regions:
        - distance: 0.8008282
          provider: null
          name: name
          serverless: true
          location: location
        - distance: 0.8008282
          provider: null
          name: name
          serverless: true
          location: location
      properties:
        pagination:
          $ref: '#/components/schemas/KeysetPaginationResponse'
        regions:
          items:
            $ref: '#/components/schemas/CloudProviderRegion'
          type: array
      required:
      - regions
      type: object
    ListClusterNodesResponse:
      example:
        nodes:
        - name: name
          region_name: region_name
          status: null
        - name: name
          region_name: region_name
          status: null
        pagination:
          next_page: next_page
          previous_page: previous_page
      properties:
        nodes:
          items:
            $ref: '#/components/schemas/Node'
          type: array
        pagination:
          $ref: '#/components/schemas/KeysetPaginationResponse'
      required:
      - nodes
      type: object
    ListClustersResponse:
      example:
        pagination:
          next_page: next_page
          previous_page: previous_page
        clusters:
        - account_id: ""
          cloud_provider: GCP
          cockroach_version: v21.2.4
          config:
            serverless:
              routing_id: example-cluster-1533
              spend_limit: 0
          created_at: 2022-03-22T20:23:11.285067Z
          creator_id: 7cde0cd9-0d8a-4008-8f90-45092ce8afc1
          deleted_at: null
          id: 35c4abb2-bb66-46d7-afed-25ebef5ed2aa
          name: example-cluster
          operation_status: CLUSTER_STATUS_UNSPECIFIED
          plan: SERVERLESS
          regions:
          - name: us-central1
            node_count: 0
            sql_dns: free-tier7.gcp-us-central1.crdb.io
            ui_dns: ""
          state: CREATED
          updated_at: 2022-03-22T20:23:11.879593Z
          upgrade_status: USING_LATEST
        - account_id: ""
          cloud_provider: GCP
          cockroach_version: v21.2.4
          config:
            serverless:
              routing_id: example-cluster-1533
              spend_limit: 0
          created_at: 2022-03-22T20:23:11.285067Z
          creator_id: 7cde0cd9-0d8a-4008-8f90-45092ce8afc1
          deleted_at: null
          id: 35c4abb2-bb66-46d7-afed-25ebef5ed2aa
          name: example-cluster
          operation_status: CLUSTER_STATUS_UNSPECIFIED
          plan: SERVERLESS
          regions:
          - name: us-central1
            node_count: 0
            sql_dns: free-tier7.gcp-us-central1.crdb.io
            ui_dns: ""
          state: CREATED
          updated_at: 2022-03-22T20:23:11.879593Z
          upgrade_status: USING_LATEST
      properties:
        clusters:
          items:
            $ref: '#/components/schemas/Cluster'
          type: array
        pagination:
          $ref: '#/components/schemas/KeysetPaginationResponse'
      required:
      - clusters
      type: object
    ListEgressRulesResponse:
      description: ListEgressRulesResponse is the output for the ListEgressRules RPC.
      example:
        pagination:
          next_page: next_page
          previous_page: previous_page
        rules:
        - crl_managed: true
          cluster_id: cluster_id
          paths:
          - paths
          - paths
          destination: destination
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          description: description
          id: id
          state: state
          ports:
          - 0
          - 0
          type: type
        - crl_managed: true
          cluster_id: cluster_id
          paths:
          - paths
          - paths
          destination: destination
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          description: description
          id: id
          state: state
          ports:
          - 0
          - 0
          type: type
      properties:
        pagination:
          $ref: '#/components/schemas/KeysetPaginationResponse'
        rules:
          description: rules are the egress rules associated with the given CockroachDB
            cluster.
          items:
            $ref: '#/components/schemas/EgressRule'
          type: array
      title: ListEgressRulesResponse
      type: object
    ListInvoicesResponse:
      example:
        invoices:
        - period_end: 2000-01-23T04:56:07.000+00:00
          balances:
          - amount: 0.8008281904610115
            currency: null
          - amount: 0.8008281904610115
            currency: null
          adjustments:
          - amount:
              amount: 0.8008281904610115
              currency: null
            name: name
          - amount:
              amount: 0.8008281904610115
              currency: null
            name: name
          invoice_items:
          - cluster:
              account_id: ""
              cloud_provider: GCP
              cockroach_version: v21.2.4
              config:
                serverless:
                  routing_id: example-cluster-1533
                  spend_limit: 0
              created_at: 2022-03-22T20:23:11.285067Z
              creator_id: 7cde0cd9-0d8a-4008-8f90-45092ce8afc1
              deleted_at: null
              id: 35c4abb2-bb66-46d7-afed-25ebef5ed2aa
              name: example-cluster
              operation_status: CLUSTER_STATUS_UNSPECIFIED
              plan: SERVERLESS
              regions:
              - name: us-central1
                node_count: 0
                sql_dns: free-tier7.gcp-us-central1.crdb.io
                ui_dns: ""
              state: CREATED
              updated_at: 2022-03-22T20:23:11.879593Z
              upgrade_status: USING_LATEST
            line_items:
            - quantity_unit: null
              total:
                amount: 0.8008281904610115
                currency: null
              quantity: 6.027456183070403
              description: description
              unit_cost: 1.4658129805029452
            - quantity_unit: null
              total:
                amount: 0.8008281904610115
                currency: null
              quantity: 6.027456183070403
              description: description
              unit_cost: 1.4658129805029452
            totals:
            - amount: 0.8008281904610115
              currency: null
            - amount: 0.8008281904610115
              currency: null
          - cluster:
              account_id: ""
              cloud_provider: GCP
              cockroach_version: v21.2.4
              config:
                serverless:
                  routing_id: example-cluster-1533
                  spend_limit: 0
              created_at: 2022-03-22T20:23:11.285067Z
              creator_id: 7cde0cd9-0d8a-4008-8f90-45092ce8afc1
              deleted_at: null
              id: 35c4abb2-bb66-46d7-afed-25ebef5ed2aa
              name: example-cluster
              operation_status: CLUSTER_STATUS_UNSPECIFIED
              plan: SERVERLESS
              regions:
              - name: us-central1
                node_count: 0
                sql_dns: free-tier7.gcp-us-central1.crdb.io
                ui_dns: ""
              state: CREATED
              updated_at: 2022-03-22T20:23:11.879593Z
              upgrade_status: USING_LATEST
            line_items:
            - quantity_unit: null
              total:
                amount: 0.8008281904610115
                currency: null
              quantity: 6.027456183070403
              description: description
              unit_cost: 1.4658129805029452
            - quantity_unit: null
              total:
                amount: 0.8008281904610115
                currency: null
              quantity: 6.027456183070403
              description: description
              unit_cost: 1.4658129805029452
            totals:
            - amount: 0.8008281904610115
              currency: null
            - amount: 0.8008281904610115
              currency: null
          period_start: 2000-01-23T04:56:07.000+00:00
          invoice_id: invoice_id
          totals:
          - amount: 0.8008281904610115
            currency: null
          - amount: 0.8008281904610115
            currency: null
        - period_end: 2000-01-23T04:56:07.000+00:00
          balances:
          - amount: 0.8008281904610115
            currency: null
          - amount: 0.8008281904610115
            currency: null
          adjustments:
          - amount:
              amount: 0.8008281904610115
              currency: null
            name: name
          - amount:
              amount: 0.8008281904610115
              currency: null
            name: name
          invoice_items:
          - cluster:
              account_id: ""
              cloud_provider: GCP
              cockroach_version: v21.2.4
              config:
                serverless:
                  routing_id: example-cluster-1533
                  spend_limit: 0
              created_at: 2022-03-22T20:23:11.285067Z
              creator_id: 7cde0cd9-0d8a-4008-8f90-45092ce8afc1
              deleted_at: null
              id: 35c4abb2-bb66-46d7-afed-25ebef5ed2aa
              name: example-cluster
              operation_status: CLUSTER_STATUS_UNSPECIFIED
              plan: SERVERLESS
              regions:
              - name: us-central1
                node_count: 0
                sql_dns: free-tier7.gcp-us-central1.crdb.io
                ui_dns: ""
              state: CREATED
              updated_at: 2022-03-22T20:23:11.879593Z
              upgrade_status: USING_LATEST
            line_items:
            - quantity_unit: null
              total:
                amount: 0.8008281904610115
                currency: null
              quantity: 6.027456183070403
              description: description
              unit_cost: 1.4658129805029452
            - quantity_unit: null
              total:
                amount: 0.8008281904610115
                currency: null
              quantity: 6.027456183070403
              description: description
              unit_cost: 1.4658129805029452
            totals:
            - amount: 0.8008281904610115
              currency: null
            - amount: 0.8008281904610115
              currency: null
          - cluster:
              account_id: ""
              cloud_provider: GCP
              cockroach_version: v21.2.4
              config:
                serverless:
                  routing_id: example-cluster-1533
                  spend_limit: 0
              created_at: 2022-03-22T20:23:11.285067Z
              creator_id: 7cde0cd9-0d8a-4008-8f90-45092ce8afc1
              deleted_at: null
              id: 35c4abb2-bb66-46d7-afed-25ebef5ed2aa
              name: example-cluster
              operation_status: CLUSTER_STATUS_UNSPECIFIED
              plan: SERVERLESS
              regions:
              - name: us-central1
                node_count: 0
                sql_dns: free-tier7.gcp-us-central1.crdb.io
                ui_dns: ""
              state: CREATED
              updated_at: 2022-03-22T20:23:11.879593Z
              upgrade_status: USING_LATEST
            line_items:
            - quantity_unit: null
              total:
                amount: 0.8008281904610115
                currency: null
              quantity: 6.027456183070403
              description: description
              unit_cost: 1.4658129805029452
            - quantity_unit: null
              total:
                amount: 0.8008281904610115
                currency: null
              quantity: 6.027456183070403
              description: description
              unit_cost: 1.4658129805029452
            totals:
            - amount: 0.8008281904610115
              currency: null
            - amount: 0.8008281904610115
              currency: null
          period_start: 2000-01-23T04:56:07.000+00:00
          invoice_id: invoice_id
          totals:
          - amount: 0.8008281904610115
            currency: null
          - amount: 0.8008281904610115
            currency: null
      properties:
        invoices:
          description: invoices are sorted by period_start time.
          items:
            $ref: '#/components/schemas/Invoice'
          type: array
      required:
      - invoices
      type: object
    ListMajorClusterVersionsResponse:
      example:
        pagination:
          next_page: next_page
          previous_page: previous_page
        versions:
        - support_status: null
          version: version
        - support_status: null
          version: version
      properties:
        pagination:
          $ref: '#/components/schemas/KeysetPaginationResponse'
        versions:
          items:
            $ref: '#/components/schemas/ClusterMajorVersion'
          type: array
      required:
      - versions
      type: object
    ListRoleGrantsResponse:
      example:
        grants:
        - - name: CLUSTER_ADMIN
            resource:
              id: example_cluster_id
              type: CLUSTER
        - - name: CLUSTER_ADMIN
            resource:
              id: example_cluster_id
              type: CLUSTER
        pagination:
          next_page: next_page
          previous_page: previous_page
        user_group_grants:
        - group_roles:
          - role:
              resource:
                id: id
                type: null
              name: null
            group_names:
            - group_names
            - group_names
          - role:
              resource:
                id: id
                type: null
              name: null
            group_names:
            - group_names
            - group_names
          user_id: user_id
        - group_roles:
          - role:
              resource:
                id: id
                type: null
              name: null
            group_names:
            - group_names
            - group_names
          - role:
              resource:
                id: id
                type: null
              name: null
            group_names:
            - group_names
            - group_names
          user_id: user_id
      properties:
        grants:
          items:
            $ref: '#/components/schemas/UserRoleGrants'
          type: array
        pagination:
          $ref: '#/components/schemas/KeysetPaginationResponse'
        user_group_grants:
          items:
            $ref: '#/components/schemas/UserGroupRoleGrant'
          type: array
      title: list_role_grants_response contains a representation of all roles
      type: object
    ListSQLUsersResponse:
      example:
        pagination:
          next_page: next_page
          previous_page: previous_page
        users:
        - name: name
        - name: name
      properties:
        pagination:
          $ref: '#/components/schemas/KeysetPaginationResponse'
        users:
          items:
            $ref: '#/components/schemas/SQLUser'
          type: array
      required:
      - users
      type: object
    LogExportClusterInfo:
      description: |-
        LogExportClusterInfo contains a package of information that fully
        describes both the intended state of the log export configuration for
        a specific cluster but also some metadata around its deployment
        status, any error messages, and some timestamps.
      example:
        cluster_id: cluster_id
        updated_at: 2000-01-23T04:56:07.000+00:00
        created_at: 2000-01-23T04:56:07.000+00:00
        user_message: user_message
        spec:
          auth_principal: auth_principal
          log_name: log_name
          redact: true
          groups:
          - channels:
            - channels
            - channels
            log_name: log_name
            redact: true
            min_level: null
          - channels:
            - channels
            - channels
            log_name: log_name
            redact: true
            min_level: null
          region: region
          type: null
        status: null
      properties:
        cluster_id:
          type: string
        created_at:
          format: date-time
          type: string
        spec:
          $ref: '#/components/schemas/LogExportClusterSpecification'
        status:
          $ref: '#/components/schemas/LogExportStatus'
        updated_at:
          format: date-time
          type: string
        user_message:
          type: string
      type: object
    LogExportClusterSpecification:
      description: |-
        LogExportClusterSpecification contains all the data necessary to
        configure log export for an individual cluster. Users would supply
        this data via the API and also receive it back when inspecting the
        state of their log export configuration.
      example:
        auth_principal: auth_principal
        log_name: log_name
        redact: true
        groups:
        - channels:
          - channels
          - channels
          log_name: log_name
          redact: true
          min_level: null
        - channels:
          - channels
          - channels
          log_name: log_name
          redact: true
          min_level: null
        region: region
        type: null
      properties:
        auth_principal:
          description: |-
            auth_principal is either the AWS Role ARN that identifies a role
            that the cluster account can assume to write to CloudWatch or the
            GCP Project ID that the cluster service account has permissions to
            write to for cloud logging.
          type: string
        groups:
          description: |-
            groups is a collection of log group configurations to customize
            which CRDB channels get aggregated into different groups at the
            target sink. Unconfigured channels will be sent to the default
            locations via the settings above.
          items:
            $ref: '#/components/schemas/LogExportGroup'
          type: array
        log_name:
          description: log_name is an identifier for the logs in the customer's log
            sink.
          type: string
        redact:
          description: |-
            redact controls whether logs are redacted before forwarding to
            customer sinks. By default they are not redacted.
          type: boolean
        region:
          description: |-
            region controls whether all logs are sent to a specific region in
            the customer sink. By default, logs will remain their region of
            origin depending on the cluster node's region.
          type: string
        type:
          $ref: '#/components/schemas/LogExportType'
      type: object
    LogExportGroup:
      description: |-
        LogExportGroup contains an export configuration for a single
        log group which can route logs for a subset of CRDB channels.
      example:
        channels:
        - channels
        - channels
        log_name: log_name
        redact: true
        min_level: null
      properties:
        channels:
          description: |-
            channels is a list of CRDB log channels to include in this
            group.
          items:
            type: string
          type: array
        log_name:
          description: "log_name is the name of the group, reflected in the log sink."
          type: string
        min_level:
          $ref: '#/components/schemas/LogLevel.Type'
        redact:
          description: |-
            redact is a boolean that governs whether this log group
            should aggregate redacted logs. Redaction settings will
            inherit from the cluster log export defaults if unset.
          type: boolean
      required:
      - channels
      - log_name
      type: object
    LogExportStatus:
      description: |-
        LogExportStatus encodes the possible states that a configuration can
        be in as it is created, deployed, and disabled.
      enum:
      - DISABLED
      - DISABLING
      - DISABLE_FAILED
      - ENABLED
      - ENABLING
      - ENABLE_FAILED
      type: string
    LogExportType:
      description: |-
        LogExportType encodes the cloud selection that we're exporting to
        along with the cloud logging platform.

        Currently, each cloud has a single logging platform.
      enum:
      - AWS_CLOUDWATCH
      - GCP_CLOUD_LOGGING
      type: string
    LogLevel.Type:
      description: |2-
         - UNSPECIFIED: The unspecified log level includes all logs.
         - WARNING: The WARNING severity is used for situations which may require
        special handling, where normal operation is expected to resume
        automatically.
         - ERROR: The ERROR severity is used for situations that require special
        handling, where normal operation could not proceed as expected.
        Other operations can continue mostly unaffected.
         - FATAL: The FATAL severity is used for situations that require an
        immediate, hard server shutdown. A report is also sent to
        telemetry if telemetry is enabled.
      enum:
      - UNSPECIFIED
      - WARNING
      - ERROR
      - FATAL
      type: string
    MetricExportStatus.Type:
      enum:
      - NOT_DEPLOYED
      - DISABLING
      - ENABLING
      - ENABLED
      - ERROR
      type: string
    NetworkVisibility.Type:
      enum:
      - PUBLIC
      - PRIVATE
      type: string
    Node:
      example:
        name: name
        region_name: region_name
        status: null
      properties:
        name:
          type: string
        region_name:
          type: string
        status:
          $ref: '#/components/schemas/NodeStatus.Type'
      required:
      - name
      - region_name
      - status
      type: object
    NodeStatus.Type:
      enum:
      - LIVE
      - NOT_READY
      type: string
    NullValue:
      description: |-
        `NullValue` is a singleton enumeration to represent the null value for the
        `Value` type union.

         The JSON representation for `NullValue` is JSON `null`.

         - NULL_VALUE: Null value.
      type: string
    OperatingSystem.Type:
      enum:
      - MAC
      - LINUX
      - WINDOWS
      type: string
    Organization:
      example:
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        id: id
        label: label
      properties:
        created_at:
          format: date-time
          type: string
        id:
          type: string
        label:
          type: string
        name:
          type: string
      required:
      - created_at
      - id
      - label
      - name
      type: object
    OrganizationUserRole.Type:
      enum:
      - DEVELOPER
      - ADMIN
      - BILLING_COORDINATOR
      - ORG_ADMIN
      - ORG_MEMBER
      - CLUSTER_ADMIN
      - CLUSTER_OPERATOR_WRITER
      - CLUSTER_OPERATOR_READER
      - CLUSTER_DEVELOPER
      - CLUSTER_CREATOR
      type: string
    PersonUserInfo:
      example:
        id: id
        email: email
      properties:
        email:
          description: email is an email address.
          type: string
        id:
          description: id is the user id.
          type: string
      required:
      - id
      title: person_user_info contains information about a person
      type: object
    Plan.Type:
      description: |2-
         - DEDICATED: A paid plan that offers dedicated hardware in any location.
         - CUSTOM: A plan option that is used for clusters whose machine configs are not
        supported in self-service. All INVOICE clusters are under this plan option.
         - SERVERLESS: A paid plan that runs on shared hardware and caps the users'
        maximum monthly spending to a user-specified (possibly 0) amount.
      enum:
      - DEDICATED
      - CUSTOM
      - SERVERLESS
      type: string
    PrivateEndpointService:
      example:
        cloud_provider: null
        region_name: region_name
        aws:
          availability_zone_ids:
          - availability_zone_ids
          - availability_zone_ids
          service_name: service_name
          service_id: service_id
        status: null
      properties:
        aws:
          $ref: '#/components/schemas/AWSPrivateLinkServiceDetail'
        cloud_provider:
          $ref: '#/components/schemas/CloudProvider.Type'
        region_name:
          description: region_name is the cloud provider region name (i.e. us-east-1).
          type: string
        status:
          $ref: '#/components/schemas/PrivateEndpointServiceStatus.Type'
      required:
      - aws
      - cloud_provider
      - region_name
      - status
      type: object
    PrivateEndpointServiceStatus.Type:
      enum:
      - CREATING
      - AVAILABLE
      - CREATE_FAILED
      - DELETING
      - DELETE_FAILED
      type: string
    PrivateEndpointServices:
      example:
        services:
        - cloud_provider: null
          region_name: region_name
          aws:
            availability_zone_ids:
            - availability_zone_ids
            - availability_zone_ids
            service_name: service_name
            service_id: service_id
          status: null
        - cloud_provider: null
          region_name: region_name
          aws:
            availability_zone_ids:
            - availability_zone_ids
            - availability_zone_ids
            service_name: service_name
            service_id: service_id
          status: null
      properties:
        services:
          description: services contains a list of all cluster related services.
          items:
            $ref: '#/components/schemas/PrivateEndpointService'
          type: array
      required:
      - services
      type: object
    QuantityUnit.Type:
      enum:
      - HOURS
      - REQUEST_UNITS
      type: string
    Region:
      properties:
        internal_dns:
          description: internal_dns is the internal DNS name of the cluster within
            the cloud provider's network. It is used to connect to the cluster with
            PrivateLink or VPC peering.
          type: string
        name:
          type: string
        node_count:
          description: node_count will be 0 for Serverless clusters.
          format: int32
          type: integer
        primary:
          description: primary is true only for the primary region in a Multi Region
            Serverless cluster.
          type: boolean
        sql_dns:
          description: sql_dns is the DNS name of SQL interface of the cluster. It
            is used to connect to the cluster with IP allowlisting.
          type: string
        ui_dns:
          description: ui_dns is the DNS name used when connecting to the DB Console
            for the cluster.
          type: string
      required:
      - internal_dns
      - name
      - node_count
      - sql_dns
      - ui_dns
      type: object
    Resource:
      example:
        id: id
        type: null
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/ResourceType.Type'
      required:
      - type
      type: object
    ResourceType.Type:
      enum:
      - ORGANIZATION
      - CLUSTER
      type: string
    SQLUser:
      example:
        name: name
      properties:
        name:
          type: string
      required:
      - name
      type: object
    ScimAuthenticationScheme:
      example:
        documentationUri: documentationUri
        name: name
        description: description
        specUri: specUri
        type: type
        primary: true
      properties:
        description:
          type: string
        documentationUri:
          type: string
        name:
          type: string
        primary:
          type: boolean
        specUri:
          type: string
        type:
          type: string
      type: object
    ScimBulkSupport:
      example:
        maxPayloadSize: 6
        maxOperations: 0
        supported: true
      properties:
        maxOperations:
          format: int32
          type: integer
        maxPayloadSize:
          format: int32
          type: integer
        supported:
          type: boolean
      type: object
    ScimChangePasswordSupport:
      example:
        supported: true
      properties:
        supported:
          type: boolean
      type: object
    ScimEmail:
      example:
        display: display
        type: type
        value: value
        primary: true
      properties:
        display:
          type: string
        primary:
          type: boolean
        type:
          type: string
        value:
          type: string
      required:
      - primary
      - value
      type: object
    ScimEtagSupport:
      example:
        maxResults: 1
        supported: true
      properties:
        maxResults:
          format: int32
          type: integer
        supported:
          type: boolean
      type: object
    ScimFilterSupport:
      example:
        maxResults: 5
        supported: true
      properties:
        maxResults:
          format: int32
          type: integer
        supported:
          type: boolean
      type: object
    ScimGroup:
      example:
        displayName: displayName
        meta:
          created: created
          location: location
          lastModified: lastModified
          resourceType: resourceType
        members:
        - ref: ref
          display: display
          type: type
          value: value
        - ref: ref
          display: display
          type: type
          value: value
        schemas:
        - schemas
        - schemas
        externalId: externalId
        id: id
      properties:
        displayName:
          type: string
        externalId:
          type: string
        id:
          type: string
        members:
          items:
            $ref: '#/components/schemas/ScimResource'
          type: array
        meta:
          $ref: '#/components/schemas/ScimMetadata'
        schemas:
          items:
            type: string
          type: array
      type: object
    ScimMetadata:
      example:
        created: created
        location: location
        lastModified: lastModified
        resourceType: resourceType
      properties:
        created:
          type: string
        lastModified:
          type: string
        location:
          type: string
        resourceType:
          type: string
      title: meta
      type: object
    ScimName:
      example:
        familyName: familyName
        givenName: givenName
      properties:
        familyName:
          type: string
        givenName:
          type: string
      title: name
      type: object
    ScimOperations:
      example:
        op: op
        path: path
        value:
          '@type': '@type'
      properties:
        op:
          type: string
        path:
          type: string
        value:
          $ref: '#/components/schemas/Any'
      type: object
    ScimResource:
      example:
        ref: ref
        display: display
        type: type
        value: value
      properties:
        display:
          type: string
        ref:
          type: string
        type:
          type: string
        value:
          type: string
      title: SCIM
      type: object
    ScimResourceType:
      example:
        schema: schema
        endpoint: endpoint
        meta:
          created: created
          location: location
          lastModified: lastModified
          resourceType: resourceType
        schemas:
        - schemas
        - schemas
        name: name
        description: description
        id: id
      properties:
        description:
          type: string
        endpoint:
          type: string
        id:
          type: string
        meta:
          $ref: '#/components/schemas/ScimMetadata'
        name:
          type: string
        schema:
          type: string
        schemas:
          items:
            type: string
          type: array
      type: object
    ScimSchema:
      example:
        meta:
          created: created
          location: location
          lastModified: lastModified
          resourceType: resourceType
        name: name
        description: description
        attributes:
        - uniqueness: uniqueness
          name: name
          canonicalValues:
          - canonicalValues
          - canonicalValues
          description: description
          referenceTypes:
          - referenceTypes
          - referenceTypes
          mutability: mutability
          caseExact: true
          multiValued: true
          returned: returned
          type: type
          required: true
          subAttributes:
          - null
          - null
        - uniqueness: uniqueness
          name: name
          canonicalValues:
          - canonicalValues
          - canonicalValues
          description: description
          referenceTypes:
          - referenceTypes
          - referenceTypes
          mutability: mutability
          caseExact: true
          multiValued: true
          returned: returned
          type: type
          required: true
          subAttributes:
          - null
          - null
        id: id
      properties:
        attributes:
          items:
            $ref: '#/components/schemas/ScimSchemaAttribute'
          type: array
        description:
          type: string
        id:
          type: string
        meta:
          $ref: '#/components/schemas/ScimMetadata'
        name:
          type: string
      type: object
    ScimSchemaAttribute:
      example:
        uniqueness: uniqueness
        name: name
        canonicalValues:
        - canonicalValues
        - canonicalValues
        description: description
        referenceTypes:
        - referenceTypes
        - referenceTypes
        mutability: mutability
        caseExact: true
        multiValued: true
        returned: returned
        type: type
        required: true
        subAttributes:
        - null
        - null
      properties:
        canonicalValues:
          items:
            type: string
          type: array
        caseExact:
          type: boolean
        description:
          type: string
        multiValued:
          type: boolean
        mutability:
          type: string
        name:
          type: string
        referenceTypes:
          items:
            type: string
          type: array
        required:
          type: boolean
        returned:
          type: string
        subAttributes:
          items:
            $ref: '#/components/schemas/ScimSchemaAttribute'
          type: array
        type:
          type: string
        uniqueness:
          type: string
      type: object
    ScimSortSupport:
      example:
        supported: true
      properties:
        supported:
          type: boolean
      type: object
    ScimUser:
      example:
        emails:
        - display: display
          type: type
          value: value
          primary: true
        - display: display
          type: type
          value: value
          primary: true
        displayName: displayName
        meta:
          created: created
          location: location
          lastModified: lastModified
          resourceType: resourceType
        schemas:
        - schemas
        - schemas
        name:
          familyName: familyName
          givenName: givenName
        active: true
        externalId: externalId
        groups:
        - ref: ref
          display: display
          type: type
          value: value
        - ref: ref
          display: display
          type: type
          value: value
        id: id
        userName: userName
      properties:
        active:
          type: boolean
        displayName:
          type: string
        emails:
          items:
            $ref: '#/components/schemas/ScimEmail'
          type: array
        externalId:
          type: string
        groups:
          items:
            $ref: '#/components/schemas/ScimResource'
          type: array
        id:
          type: string
        meta:
          $ref: '#/components/schemas/ScimMetadata'
        name:
          $ref: '#/components/schemas/ScimName'
        schemas:
          items:
            type: string
          type: array
        userName:
          type: string
      type: object
    ServerlessClusterConfig:
      properties:
        routing_id:
          description: routing_id is used to identify the cluster in a connection
            string.
          type: string
        spend_limit:
          description: |-
            spend_limit is the maximum monthly charge for a cluster, in US cents. We
            recommend using usage_limits instead, since spend_limit will be deprecated
            in the future.
          format: int32
          type: integer
        usage_limits:
          $ref: '#/components/schemas/UsageLimits'
      required:
      - routing_id
      type: object
    ServerlessClusterCreateSpecification:
      properties:
        primary_region:
          description: |-
            Preview: Specify which region should be made the primary region.
            This is only applicable to multi-region Serverless clusters.
            This field is required if you create the cluster in more than
            one region.
          type: string
        regions:
          description: |-
            Region values should match the cloud provider's zone code.
            For example, for Oregon, set region_name to "us-west2" for
            GCP and "us-west-2" for AWS.
          items:
            type: string
          type: array
        spend_limit:
          description: |-
            spend_limit is the maximum monthly charge for a cluster, in US cents. We
            recommend using usage_limits instead, since spend_limit will be deprecated
            in the future.
          format: int32
          type: integer
        usage_limits:
          $ref: '#/components/schemas/UsageLimits'
      required:
      - regions
      type: object
    ServerlessClusterUpdateSpecification:
      properties:
        spend_limit:
          description: |-
            spend_limit is the maximum monthly charge for a cluster, in US cents. We
            recommend using usage_limits instead, since spend_limit will be deprecated
            in the future.
          format: int32
          type: integer
        usage_limits:
          $ref: '#/components/schemas/UsageLimits'
      type: object
    SetAWSEndpointConnectionStatus.Type:
      description: |2-
         - AVAILABLE: accept/verify the connection on the service side.
         - REJECTED: reject the connection on the service side.
      enum:
      - AVAILABLE
      - REJECTED
      type: string
    SortOrder:
      description: |2-
         - ASC: Sort in ascending order. This is the default unless otherwise specified.
         - DESC: Sort in descending order.
      enum:
      - ASC
      - DESC
      type: string
    Status:
      properties:
        code:
          format: int32
          type: integer
        details:
          items:
            $ref: '#/components/schemas/Any'
          type: array
        message:
          type: string
      type: object
    UpdateClusterSpecification:
      description: "Set `upgrade_status` to 'UPGRADE_RUNNING' to start an upgrade.\
        \ Multi-node clusters will undergo a rolling upgrade and will remain available,\
        \ but single-node clusters will be briefly unavailable while the upgrade takes\
        \ place. Upgrades will be finalized automatically after 72 hours, or can be\
        \ manually finalized by setting the value to 'FINALIZED'. Before the cluster\
        \ is finalized, it can be rolled back by setting the value to 'ROLLBACK_RUNNING'.\
        \ Version upgrade operations cannot be performed simultaneously with other\
        \ update operations."
      example:
        dedicated:
          hardware:
            machine_spec:
              machine_type: n2-standard-8
          region_nodes:
            us-central1: 5
            us-west1: 3
        upgrade_status: UPGRADE_RUNNING
      properties:
        dedicated:
          $ref: '#/components/schemas/DedicatedClusterUpdateSpecification'
        serverless:
          $ref: '#/components/schemas/ServerlessClusterUpdateSpecification'
        upgrade_status:
          $ref: '#/components/schemas/ClusterUpgradeStatus.Type'
      type: object
    UsageLimits:
      properties:
        request_unit_limit:
          description: |-
            request_unit_limit is the maximum number of request units that the cluster
            can consume during the month. If this limit is exceeded, then the cluster
            is disabled until the limit is increased, or until the beginning of the
            next month when more free request units are granted. It is an error for
            this to be zero.
          format: int64
          type: integer
        storage_mib_limit:
          description: |-
            storage_mib_limit is the maximum number of Mebibytes of storage that the
            cluster can have at any time during the month. If this limit is exceeded,
            then the cluster is throttled; only one SQL connection is allowed at a
            time, with the expectation that it is used to delete data to reduce storage
            usage. It is an error for this to be zero.
          format: int64
          type: integer
      required:
      - request_unit_limit
      - storage_mib_limit
      type: object
    UserGroupRoleGrant:
      example:
        group_roles:
        - role:
            resource:
              id: id
              type: null
            name: null
          group_names:
          - group_names
          - group_names
        - role:
            resource:
              id: id
              type: null
            name: null
          group_names:
          - group_names
          - group_names
        user_id: user_id
      properties:
        group_roles:
          items:
            $ref: '#/components/schemas/BuiltInFromGroups'
          type: array
        user_id:
          type: string
      type: object
    UserRoleGrants:
      example:
      - name: CLUSTER_ADMIN
        resource:
          id: example_cluster_id
          type: CLUSTER
      properties:
        roles:
          items:
            $ref: '#/components/schemas/BuiltInRole'
          type: array
        user_id:
          type: string
      required:
      - roles
      - user_id
      type: object
    api.Database:
      example:
        table_count: 0
        name: name
      properties:
        name:
          type: string
        table_count:
          format: int64
          type: integer
      required:
      - name
      title: Database
      type: object
    api.ListDatabasesResponse:
      example:
        databases:
        - table_count: 0
          name: name
        - table_count: 0
          name: name
        pagination:
          next_page: next_page
          previous_page: previous_page
      properties:
        databases:
          items:
            $ref: '#/components/schemas/api.Database'
          type: array
        pagination:
          $ref: '#/components/schemas/KeysetPaginationResponse'
      required:
      - databases
      title: ListDatabasesResponse
      type: object
    UpdateGroupRequest:
      example:
        displayName: Test SCIM
        id: 23a35c27-23d3-4c03-b4c5-6443c09e7173
        members:
        - display: croach@example.com
          value: 45a35c27-23d3-4d03-c4c5-9043c09e7175
        schemas:
        - "0": u
          "1": r
          "2": "n"
          "3": ':'
          "4": i
          "5": e
          "6": t
          "7": f
          "8": ':'
          "9": p
          "10": a
          "11": r
          "12": a
          "13": m
          "14": s
          "15": ':'
          "16": s
          "17": c
          "18": i
          "19": m
          "20": ':'
          "21": s
          "22": c
          "23": h
          "24": e
          "25": m
          "26": a
          "27": s
          "28": ':'
          "29": c
          "30": o
          "31": r
          "32": e
          "33": ':'
          "34": "2"
          "35": "."
          "36": "0"
          "37": ':'
          "38": G
          "39": r
          "40": o
          "41": u
          "42": p
      properties:
        displayName:
          type: string
        externalId:
          type: string
        members:
          items:
            $ref: '#/components/schemas/ScimResource'
          type: array
        schemas:
          items:
            type: string
          type: array
      required:
      - displayName
      title: UpdateGroupRequest
      type: object
    PatchGroupRequest:
      example:
        schemas:
        - schemas
        - schemas
        Operations:
        - op: op
          path: path
          value:
            '@type': '@type'
        - op: op
          path: path
          value:
            '@type': '@type'
      properties:
        Operations:
          items:
            $ref: '#/components/schemas/ScimOperations'
          type: array
        schemas:
          items:
            type: string
          type: array
      title: PatchGroupRequest
      type: object
    GetGroupRequest:
      example:
        attributes: attributes
        excludedAttributes: excludedAttributes
      properties:
        attributes:
          type: string
        excludedAttributes:
          type: string
      title: GetGroupRequest
      type: object
    UpdateUserRequest:
      example:
        active: true
        emails:
        - display: croach@example.com
          primary: true
          type: work
          value: croach@example.com
        name:
          familyName: Roach
          givenName: Carl
        schemas:
        - "0": u
          "1": r
          "2": "n"
          "3": ':'
          "4": i
          "5": e
          "6": t
          "7": f
          "8": ':'
          "9": p
          "10": a
          "11": r
          "12": a
          "13": m
          "14": s
          "15": ':'
          "16": s
          "17": c
          "18": i
          "19": m
          "20": ':'
          "21": s
          "22": c
          "23": h
          "24": e
          "25": m
          "26": a
          "27": s
          "28": ':'
          "29": c
          "30": o
          "31": r
          "32": e
          "33": ':'
          "34": "2"
          "35": "."
          "36": "0"
          "37": ':'
          "38": U
          "39": s
          "40": e
          "41": r
      properties:
        active:
          type: boolean
        displayName:
          type: string
        emails:
          items:
            $ref: '#/components/schemas/ScimEmail'
          type: array
        externalId:
          type: string
        name:
          $ref: '#/components/schemas/ScimName'
        schemas:
          items:
            type: string
          type: array
        userName:
          type: string
      required:
      - active
      title: UpdateUserRequest
      type: object
    PatchUserRequest:
      example:
        schemas:
        - schemas
        - schemas
        Operations:
        - op: op
          path: path
          value:
            '@type': '@type'
        - op: op
          path: path
          value:
            '@type': '@type'
      properties:
        Operations:
          items:
            $ref: '#/components/schemas/ScimOperations'
          type: array
        schemas:
          items:
            type: string
          type: array
      title: PatchUserRequest
      type: object
    GetUserRequest:
      example:
        attributes: attributes
        excludedAttributes: excludedAttributes
      properties:
        attributes:
          type: string
        excludedAttributes:
          type: string
      title: GetUserRequest
      type: object
    SetClientCACertRequest:
      example:
        x509_pem_cert: '-----BEGIN CERTIFICATE-----...'
      properties:
        x509_pem_cert:
          type: string
      required:
      - x509_pem_cert
      title: SetClientCACertRequest
      type: object
    UpdateClientCACertRequest:
      example:
        x509_pem_cert: '-----BEGIN CERTIFICATE-----...'
      properties:
        x509_pem_cert:
          type: string
      title: UpdateClientCACertRequest
      type: object
    CMEKClusterSpecification:
      example:
        region_specs:
        - key_spec:
            auth_principal: arn:aws:iam::account:role/role-name-with-path
            type: AWS_KMS
            uri: arn:aws:kms:us-west-2:111122223333:key/id-of-kms-key
          region: us-central1
      properties:
        region_specs:
          items:
            $ref: '#/components/schemas/CMEKRegionSpecification'
          type: array
      required:
      - region_specs
      title: CMEKClusterSpecification
      type: object
    UpdateCMEKStatusRequest:
      example:
        action: REVOKE
      properties:
        action:
          $ref: '#/components/schemas/CMEKCustomerAction'
      required:
      - action
      title: UpdateCMEKStatusRequest
      type: object
    CreateDatabaseRequest:
      example:
        name: example_database_name
      properties:
        name:
          type: string
      required:
      - name
      title: CreateDatabaseRequest
      type: object
    UpdateDatabaseRequest:
      example:
        name: example_database_name
        new_name: example_new_database_name
      properties:
        name:
          type: string
        new_name:
          type: string
      required:
      - name
      - new_name
      title: UpdateDatabaseRequest
      type: object
    UpdateDatabaseRequest_1:
      example:
        name: example_database_name
        new_name: example_new_database_name
      properties:
        new_name:
          type: string
      required:
      - new_name
      title: UpdateDatabaseRequest
      type: object
    EnableLogExportRequest:
      example:
        auth_principal: my-gcp-project-id
        groups:
        - channels:
          - OPS
          - HEALTH
          log_name: devops
          min_level: WARNING
        log_name: default
        redact: true
        type: GCP_CLOUD_LOGGING
      properties:
        auth_principal:
          description: |-
            auth_principal is either the AWS Role ARN that identifies a role
            that the cluster account can assume to write to CloudWatch or the
            GCP Project ID that the cluster service account has permissions to
            write to for cloud logging.
          type: string
        groups:
          description: |-
            groups is a collection of log group configurations that allows the
            customer to define collections of CRDB log channels that are aggregated
            separately at the target sink.
          items:
            $ref: '#/components/schemas/LogExportGroup'
          type: array
        log_name:
          description: log_name is an identifier for the logs in the customer's log
            sink.
          type: string
        redact:
          description: |-
            redact allows the customer to set a default redaction policy for
            logs before they are exported to the target sink. If a group config
            omits a redact flag and this one is set to `true`, then that group
            will receive redacted logs.
          type: boolean
        region:
          description: |-
            region allows the customer to override the destination region for
            all logs for a cluster.
          type: string
        type:
          $ref: '#/components/schemas/LogExportType'
      required:
      - auth_principal
      - log_name
      - type
      title: EnableLogExportRequest
      type: object
    EnableCloudWatchMetricExportRequest:
      example:
        log_group_name: example
        role_arn: arn:aws:iam::account:role/ExampleRole
        target_region: us-east-1
      properties:
        log_group_name:
          description: log_group_name is the customized log group name.
          type: string
        role_arn:
          description: |-
            role_arn is the IAM role used to upload metric segments to the
            target AWS account.
          type: string
        target_region:
          description: |-
            target_region specifies the specific AWS region that the metrics will
            be exported to.
          type: string
      required:
      - role_arn
      title: EnableCloudWatchMetricExportRequest
      type: object
    EnableDatadogMetricExportRequest:
      example:
        api_key: datadog_api_key
        site: US1
      properties:
        api_key:
          description: api_key is a Datadog API key.
          type: string
        site:
          $ref: '#/components/schemas/DatadogSite.Type'
      required:
      - api_key
      - site
      title: EnableDatadogMetricExportRequest
      type: object
    AllowlistEntry_1:
      example:
        cidr_ip: 192.168.1.1
        cidr_mask: 32
        name: Example
        sql: true
        ui: true
      properties:
        name:
          type: string
        sql:
          type: boolean
        ui:
          type: boolean
      required:
      - sql
      - ui
      title: AllowlistEntry
      type: object
    SetAwsEndpointConnectionStateRequest:
      example:
        status: AVAILABLE
      properties:
        status:
          $ref: '#/components/schemas/SetAWSEndpointConnectionStatus.Type'
      required:
      - status
      title: SetAwsEndpointConnectionStateRequest
      type: object
    AddEgressRuleRequest:
      description: AddEgressRuleRequest is the input for the rpc AddEgressRule().
      example:
        cluster_id: 35c4abb2-bb66-46d7-afed-25ebef5ed100
        description: egress for GCP storage buckets
        destination: storage.googleapis.com
        name: roach-buckets
        paths:
        - /customer-managed-bucket-1/*
        - /customer-managed-bucket-2/*
        ports:
        - 443
        - 80
        type: FQDN
      properties:
        description:
          description: description is text that serves to document the rules purpose.
          type: string
        destination:
          description: |-
            destination is the endpoint (or subnetwork if CIDR) to which traffic is
            allowed.
          type: string
        idempotency_key:
          description: |-
            idempotency_key uniquely identifies this request. If not set, it will be
            set by the server.
          type: string
        name:
          description: name is the name of the egress rule.
          type: string
        paths:
          description: |-
            paths are the allowed URL paths. If empty, all paths are allowed. Only
            valid if Type="FQDN".
          items:
            type: string
          type: array
        ports:
          description: |-
            ports are the allowed ports for TCP protocol. If Empty, all ports are
            allowed.
          items:
            format: int32
            type: integer
          type: array
        type:
          description: |-
            type classifies the Destination field. Valid types include: "FQDN",
            "CIDR".
          type: string
      required:
      - description
      - destination
      - name
      - type
      title: AddEgressRuleRequest
      type: object
    SetEgressTrafficPolicyRequest:
      description: SetEgressTrafficPolicyRequest is the input for the SetEgressTrafficPolicy
        RPC.
      example:
        idempotency_key: idempotency_key
        allow_all: true
      properties:
        allow_all:
          description: |-
            allow_all, if true results in unrestricted egress traffic. If false, egress
            traffic is set to default-deny and is managed via the Egress Rule
            Management API.
          type: boolean
        idempotency_key:
          description: |-
            idempotency_key uniquely identifies this request. If not set, it will be
            set by the server.
          type: string
      required:
      - allow_all
      title: SetEgressTrafficPolicyRequest
      type: object
    EditEgressRuleRequest:
      description: EditEgressRuleRequest is the input message to the EditEgressRule
        RPC.
      example:
        cluster_id: 35c4abb2-bb66-46d7-afed-25ebef5ed100
        ports:
        - 443
        - 80
        rule_id: 35c4abb2-bb66-46d7-afed-25ebef5ed2aa
      properties:
        description:
          description: description is text that serves to document the rules purpose.
          type: string
        destination:
          description: |-
            destination is a CIDR range or fully-qualified domain name to which
            outgoing traffic should be allowed. This field is required.
          type: string
        idempotency_key:
          description: |-
            idempotency_key uniquely identifies this request. If not set, it will be
            set by the server.
          type: string
        paths:
          description: |-
            paths are the allowed URL paths. If empty, all paths are allowed. Only
            valid if Type="FQDN".
          items:
            type: string
          type: array
        ports:
          description: |-
            ports are the allowed ports for TCP protocol. If empty, all ports are
            allowed.
          items:
            format: int32
            type: integer
          type: array
        type:
          description: |-
            type is the destination type of this rule. Example values are
            FQDN or CIDR. This field is required.
          type: string
      title: EditEgressRuleRequest
      type: object
    CreateSQLUserRequest:
      example:
        name: example_username
        password: example_password
      properties:
        name:
          type: string
        password:
          type: string
      required:
      - name
      - password
      title: CreateSQLUserRequest
      type: object
    UpdateSQLUserPasswordRequest:
      example:
        password: example_new_password
      properties:
        password:
          type: string
      required:
      - password
      title: UpdateSQLUserPasswordRequest
      type: object
    CockroachCloud_SetRolesForUser_request:
      example:
      - name: CLUSTER_ADMIN
        resource:
          id: example_cluster_id
          type: CLUSTER
      properties:
        roles:
          items:
            $ref: '#/components/schemas/BuiltInRole'
          type: array
      required:
      - roles
      type: object
  securitySchemes:
    Bearer:
      scheme: bearer
      type: http
