{{>partial_header}}
package {{packageName}}

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
{{#apiInfo}}{{#apis}}{{#operations}}{{#imports}}	"{{import}}"
{{/imports}}{{/operations}}{{/apis}}{{/apiInfo}}
)

type Service interface {
    {{#apiInfo}}{{#apis}}
	//
	// {{{baseName}}}
	//

	{{#operations}}{{#operation}}
		{{#isDeprecated}}// Deprecated: {{summary}}{{/isDeprecated}}{{^isDeprecated}}// {{summary}}{{/isDeprecated}}
        {{nickname}}(ctx _context.Context{{#allParams}}{{#required}}, {{paramName}} {{^isPathParam}}*{{/isPathParam}}{{{dataType}}}{{/required}}{{/allParams}}{{#hasOptionalParams}}, options *{{nickname}}Options{{/hasOptionalParams}}) ({{^returnTypeIsPrimitive}}{{#returnType}}*{{{.}}}, {{/returnType}}{{/returnTypeIsPrimitive}}*_nethttp.Response, error){{/operation}}
	{{/operations}}{{/apis}}{{/apiInfo}}
}

// Service for the Cockroach DB Cloud API
type ServiceImpl struct {
	client *Client
}

// NewService creates a new API service.
func NewService(c *Client) Service {
	return &ServiceImpl{client: c}
}
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}

{{#hasOptionalParams}}
// {{nickname}}Options contains optional parameters for {{nickname}}.
type {{nickname}}Options struct { {{#allParams}}{{^required}}
{{#description}}
	// {{{.}}}
{{/description}}
	{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}} {{^isPathParam}}*{{/isPathParam}}{{{dataType}}}
{{/required}}{{/allParams}} }
{{/hasOptionalParams}}

// {{nickname}} executes the request.
{{#isDeprecated}}
// Deprecated.
{{/isDeprecated}}
func (a *ServiceImpl) {{nickname}}(
	ctx _context.Context{{#allParams}}{{#required}}, {{paramName}} {{^isPathParam}}*{{/isPathParam}}{{{dataType}}}{{/required}}{{/allParams}}{{#hasOptionalParams}}, options *{{nickname}}Options{{/hasOptionalParams}},
) ({{^returnTypeIsPrimitive}}{{#returnType}}*{{{.}}}, {{/returnType}}{{/returnTypeIsPrimitive}}*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.Method{{httpMethod}}
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath := a.client.cfg.ServerURL

	localVarPath := localBasePath + "{{{path}}}"{{#pathParams}}
	localVarPath = strings.Replace(localVarPath, "{"+"{{baseName}}"+"}", _neturl.PathEscape(parameterToString({{paramName}}, "{{collectionFormat}}")), -1){{/pathParams}}

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	{{#allParams}}
	{{#required}}
	{{^isPathParam}}
	if {{paramName}} == nil {
		return {{^returnTypeIsPrimitive}}{{#returnType}}nil, {{/returnType}}{{/returnTypeIsPrimitive}}nil, reportError("{{paramName}} is required and must be specified")
	}
	{{/isPathParam}}
	{{#minItems}}
	if len({{^isPathParam}}*{{/isPathParam}}{{paramName}}) < {{minItems}} {
		return {{^returnTypeIsPrimitive}}{{#returnType}}nil, {{/returnType}}{{/returnTypeIsPrimitive}}nil, reportError("{{paramName}} must have at least {{minItems}} elements")
	}
	{{/minItems}}
	{{#maxItems}}
	if len({{^isPathParam}}*{{/isPathParam}}{{paramName}}) > {{maxItems}} {
		return {{^returnTypeIsPrimitive}}{{#returnType}}nil, {{/returnType}}{{/returnTypeIsPrimitive}}nil, reportError("{{paramName}} must have less than {{maxItems}} elements")
	}
	{{/maxItems}}
	{{#minLength}}
	if strlen({{^isPathParam}}*{{/isPathParam}}{{paramName}}) < {{minLength}} {
		return {{^returnTypeIsPrimitive}}{{#returnType}}nil, {{/returnType}}{{/returnTypeIsPrimitive}}nil, reportError("{{paramName}} must have at least {{minLength}} elements")
	}
	{{/minLength}}
	{{#maxLength}}
	if strlen({{^isPathParam}}*{{/isPathParam}}{{paramName}}) > {{maxLength}} {
		return {{^returnTypeIsPrimitive}}{{#returnType}}nil, {{/returnType}}{{/returnTypeIsPrimitive}}nil, reportError("{{paramName}} must have less than {{maxLength}} elements")
	}
	{{/maxLength}}
	{{#minimum}}
	{{#isString}}
	{{paramName}}Txt, err := atoi({{^isPathParam}}*{{/isPathParam}}{{paramName}})
	if {{paramName}}Txt < {{minimum}} {
	{{/isString}}
	{{^isString}}
	if {{^isPathParam}}*{{/isPathParam}}{{paramName}} < {{minimum}} {
	{{/isString}}
		return {{^returnTypeIsPrimitive}}{{#returnType}}nil, {{/returnType}}{{/returnTypeIsPrimitive}}nil, reportError("{{paramName}} must be greater than {{minimum}}")
	}
	{{/minimum}}
	{{#maximum}}
	{{#isString}}
	{{paramName}}Txt, err := atoi({{^isPathParam}}*{{/isPathParam}}{{paramName}})
	if {{paramName}}Txt > {{maximum}} {
	{{/isString}}
	{{^isString}}
	if {{^isPathParam}}*{{/isPathParam}}{{paramName}} > {{maximum}} {
	{{/isString}}
		return {{^returnTypeIsPrimitive}}{{#returnType}}nil, {{/returnType}}{{/returnTypeIsPrimitive}}nil, reportError("{{paramName}} must be less than {{maximum}}")
	}
	{{/maximum}}
	{{/required}}
	{{/allParams}}

	{{#queryParams}}
	{{#required}}
	{{#isCollectionFormatMulti}}
	{
		t := *{{paramName}}
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("{{baseName}}", parameterToString(s.Index(i), "{{collectionFormat}}"))
			}
		} else {
			localVarQueryParams.Add("{{baseName}}", parameterToString(t, "{{collectionFormat}}"))
		}
	}
	{{/isCollectionFormatMulti}}
	{{^isCollectionFormatMulti}}
	localVarQueryParams.Add("{{baseName}}", parameterToString(*{{paramName}}, "{{collectionFormat}}"))
	{{/isCollectionFormatMulti}}
	{{/required}}
	{{^required}}
	if options.{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}} != nil {
	{{#isCollectionFormatMulti}}
		t := *{{paramName}}
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("{{baseName}}", parameterToString(s.Index(i), "{{collectionFormat}}"))
			}
		} else {
			localVarQueryParams.Add("{{baseName}}", parameterToString(t, "{{collectionFormat}}"))
		}
	{{/isCollectionFormatMulti}}
	{{^isCollectionFormatMulti}}
		localVarQueryParams.Add("{{baseName}}", parameterToString(*options.{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}, "{{collectionFormat}}"))
	{{/isCollectionFormatMulti}}
	}
	{{/required}}
	{{/queryParams}}
	// Determine the Content-Type header.
{{=<% %>=}}
	localVarHTTPContentTypes := []string{<%#consumes%>"<%&mediaType%>"<%^-last%>, <%/-last%><%/consumes%>}
<%={{ }}=%>

	// Set Content-Type header.
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// Determine the Accept header.
{{=<% %>=}}
	localVarHTTPHeaderAccepts := []string{<%#produces%>"<%&mediaType%>"<%^-last%>, <%/-last%><%/produces%>}
<%={{ }}=%>

	// Set Accept header.
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
{{#headerParams}}
	{{#required}}
	localVarHeaderParams["{{baseName}}"] = parameterToString(*{{paramName}}, "{{collectionFormat}}")
	{{/required}}
	{{^required}}
	if options.{{paramName}} != nil {
		localVarHeaderParams["{{baseName}}"] = parameterToString(*options.{{paramName}}, "{{collectionFormat}}")
	}
	{{/required}}
{{/headerParams}}
{{#formParams}}
{{#isFile}}
	localVarFormFileName = "{{baseName}}"
{{#required}}
	localVarFile := *{{paramName}}
{{/required}}
{{^required}}
	var localVarFile {{dataType}}
	if options.{{paramName}} != nil {
		localVarFile = *options.{{paramName}}
	}
{{/required}}
	if localVarFile != nil {
		fbs, _ := _ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
{{/isFile}}
{{^isFile}}
{{#required}}
	localVarFormParams.Add("{{baseName}}", parameterToString(*{{paramName}}, "{{collectionFormat}}"))
{{/required}}
{{^required}}
{{#isModel}}
	if options.{{paramName}} != nil {
		paramJson, err := parameterToJson(*options.{{paramName}})
		if err != nil {
			return {{^returnTypeIsPrimitive}}{{#returnType}}nil, {{/returnType}}{{/returnTypeIsPrimitive}}nil, err
		}
		localVarFormParams.Add("{{baseName}}", paramJson)
	}
{{/isModel}}
{{^isModel}}
	if options.{{paramName}} != nil {
		localVarFormParams.Add("{{baseName}}", parameterToString(*options.{{paramName}}, "{{collectionFormat}}"))
	}
{{/isModel}}
{{/required}}
{{/isFile}}
{{/formParams}}
{{#bodyParams}}
	// Body params.
	{{#required}}
	localVarPostBody = {{paramName}}
	{{/required}}
	{{^required}}
	localVarPostBody = options.{{paramName}}
	{{/required}}
{{/bodyParams}}
	req, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return {{^returnTypeIsPrimitive}}{{#returnType}}nil, {{/returnType}}{{/returnTypeIsPrimitive}}nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return {{^returnTypeIsPrimitive}}{{#returnType}}nil, {{/returnType}}{{/returnTypeIsPrimitive}}localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return {{^returnTypeIsPrimitive}}{{#returnType}}nil, {{/returnType}}{{/returnTypeIsPrimitive}}localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := Error{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		{{#responses}}
		{{#dataType}}
		{{^is1xx}}
		{{^is2xx}}
		{{#range}}
		{{#is3xx}}
		if localVarHTTPResponse.StatusCode >= 300 && localVarHTTPResponse.StatusCode < 400 {
		{{/is3xx}}
		{{#is4xx}}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
		{{/is4xx}}
		{{#is5xx}}
		if localVarHTTPResponse.StatusCode >= 500 {
		{{/is5xx}}
		{{/range}}
		{{^range}}
		{{^wildcard}}
		if localVarHTTPResponse.StatusCode == {{{code}}} {
		{{/wildcard}}
		{{/range}}
			var v {{{dataType}}}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return {{^returnTypeIsPrimitive}}{{#returnType}}nil, {{/returnType}}{{/returnTypeIsPrimitive}}localVarHTTPResponse, newErr
			}
			newErr.model = v
			{{^-last}}
			return {{^returnTypeIsPrimitive}}{{#returnType}}nil, {{/returnType}}{{/returnTypeIsPrimitive}}localVarHTTPResponse, newErr
			{{/-last}}
		{{^wildcard}}
		}
		{{/wildcard}}
		{{/is2xx}}
		{{/is1xx}}
		{{/dataType}}
		{{/responses}}
		return {{^returnTypeIsPrimitive}}{{#returnType}}nil, {{/returnType}}{{/returnTypeIsPrimitive}}localVarHTTPResponse, newErr
	}

	{{^returnTypeIsPrimitive}}{{#returnType}}
	var localVarReturnValue  {{{.}}}
	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := Error{
			body:  localVarBody,
			error: err.Error(),
		}
		return {{#returnType}}&localVarReturnValue, {{/returnType}}localVarHTTPResponse, newErr
	}

	{{/returnType}}{{/returnTypeIsPrimitive}}
	return {{^returnTypeIsPrimitive}}{{#returnType}}&localVarReturnValue, {{/returnType}}{{/returnTypeIsPrimitive}}localVarHTTPResponse, nil
}
{{/operation}}
{{/operations}}{{/apis}}{{/apiInfo}}
