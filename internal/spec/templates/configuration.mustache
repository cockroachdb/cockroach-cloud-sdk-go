{{>partial_header}}
package {{packageName}}

import (
"net/http"
)

{{#servers}}
{{! ccloud has only one server }}
    {{#-first}}
        const DefaultServerURL string = "{{{url}}}"
    {{/-first}}
{{/servers}}

{{#version}}
const ApiVersion = "{{.}}"
{{/version}}

{{#withCustomMiddlewareFunction}}
    // MiddlewareFunction provides way to implement custom middleware.
    type MiddlewareFunction func(*http.Request)

{{/withCustomMiddlewareFunction}}
// Configuration stores the configuration of the API client.
type Configuration struct {
Host             string            `json:"host,omitempty"`
Scheme           string            `json:"scheme,omitempty"`
DefaultHeader    map[string]string `json:"defaultHeader,omitempty"`
UserAgent        string            `json:"userAgent,omitempty"`
Debug            bool              `json:"debug,omitempty"`
ServerURL        string
HTTPClient       *http.Client
apiToken         string
{{#withCustomMiddlewareFunction}}
    Middleware       MiddlewareFunction
{{/withCustomMiddlewareFunction}}
}

// ConfigurationOption is a function that sets some configuration options.
type ConfigurationOption func(*Configuration)

// WithVanityName sets the vanity name in the request header.
func WithVanityName(vanityName string) ConfigurationOption {
return func(cfg *Configuration) {
cfg.AddDefaultHeader("Cc-Vanity-Name", vanityName)
}
}

// WithUsername sets the username in the request header.
func WithUsername(username string) ConfigurationOption {
return func(cfg *Configuration) {
cfg.AddDefaultHeader("Cc-Username", username)
}
}

// NewConfiguration returns a new Configuration object.
// The apiToken is a secret that is used to authenticate with the API.
// It is either the API Key from a Service Account or a JWT from a JWT Issuer
// configured for the CockroachDB Cloud Organization.
// In the case of JWT, the vanity name is required and can be provided using the
// WithVanityName option.
func NewConfiguration(apiToken string, opts ...ConfigurationOption) *Configuration {
cfg := &Configuration{
DefaultHeader:    make(map[string]string),
UserAgent:        "{{{httpUserAgent}}}{{^httpUserAgent}}ccloud-sdk-go/{{{packageVersion}}}{{/httpUserAgent}}",
Debug:            false,
ServerURL:        DefaultServerURL,
apiToken:         apiToken,
}

{{#version}}
    cfg.AddDefaultHeader("Cc-Version", ApiVersion)
{{/version}}

for _, opt := range opts {
opt(cfg)
}

return cfg
}

// AddDefaultHeader adds a new HTTP header to the default header in the request.
func (c *Configuration) AddDefaultHeader(key string, value string) {
c.DefaultHeader[key] = value
}