/*
CockroachDB Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-12-28
Contact: support@cockroachlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CMEKStatus CMEKStatus describes the current status of CMEK for an entire CRDB cluster or a key within a region.   - UNKNOWN_STATUS: UNKNOWN should never be used; if it is used, it indicates a bug.  - DISABLED: DISABLED corresponds to the state of a cluster or region-level key when CMEK has finished being disabled. By default, CMEK will be disabled for new clusters.  - DISABLING: DISABLED corresponds to the state of a cluster or region-level key when CMEK is in the process of being disabled.  - DISABLE_FAILED: DISABLE_FAILED corresponds to the state of a cluster or region-level key when CMEK has failed to be disabled.  - ENABLED: ENABLED corresponds to the state of a cluster or region-level key when CMEK is enabled.  - ENABLING: ENABLING corresponds to the state of a cluster or region-level key when CMEK is in the process of being enabled.  - ENABLE_FAILED: ENABLE_FAILED corresponds to the state of a cluster or region-level key when CMEK has failed to be enabled.  - REVOKED: REVOKED corresponds to the state of a cluster or region-level key when the customer has revoked CockroachLab's permissions for their key.  - REVOKING: REVOKING corresponds to the state of a cluster or region-level key when CMEK is in the process of being revoked.  - REVOKE_FAILED: REVOKE_FAILED corresponds to the state of a cluster or region-level key when CMEK has failed to be revoked.
type CMEKStatus string

// List of CMEKStatus
const (
	UNKNOWN_STATUS CMEKStatus = "UNKNOWN_STATUS"
	DISABLED CMEKStatus = "DISABLED"
	DISABLING CMEKStatus = "DISABLING"
	DISABLE_FAILED CMEKStatus = "DISABLE_FAILED"
	ENABLED CMEKStatus = "ENABLED"
	ENABLING CMEKStatus = "ENABLING"
	ENABLE_FAILED CMEKStatus = "ENABLE_FAILED"
	REVOKED CMEKStatus = "REVOKED"
	REVOKING CMEKStatus = "REVOKING"
	REVOKE_FAILED CMEKStatus = "REVOKE_FAILED"
)

// All allowed values of CMEKStatus enum
var AllowedCMEKStatusEnumValues = []CMEKStatus{
	"UNKNOWN_STATUS",
	"DISABLED",
	"DISABLING",
	"DISABLE_FAILED",
	"ENABLED",
	"ENABLING",
	"ENABLE_FAILED",
	"REVOKED",
	"REVOKING",
	"REVOKE_FAILED",
}

func (v *CMEKStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CMEKStatus(value)
	for _, existing := range AllowedCMEKStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CMEKStatus", value)
}

// NewCMEKStatusFromValue returns a pointer to a valid CMEKStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCMEKStatusFromValue(v string) (*CMEKStatus, error) {
	ev := CMEKStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CMEKStatus: valid values are %v", v, AllowedCMEKStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CMEKStatus) IsValid() bool {
	for _, existing := range AllowedCMEKStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CMEKStatus value
func (v CMEKStatus) Ptr() *CMEKStatus {
	return &v
}

type NullableCMEKStatus struct {
	value *CMEKStatus
	isSet bool
}

func (v NullableCMEKStatus) Get() *CMEKStatus {
	return v.value
}

func (v *NullableCMEKStatus) Set(val *CMEKStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCMEKStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCMEKStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCMEKStatus(val *CMEKStatus) *NullableCMEKStatus {
	return &NullableCMEKStatus{value: val, isSet: true}
}

func (v NullableCMEKStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCMEKStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

